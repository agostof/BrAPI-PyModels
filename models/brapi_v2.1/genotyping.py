# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Genotyping-2.1-resolved.yaml
#   timestamp: 2023-03-20T19:02:17+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, conint

from af.pipeline.data_reader.models.brapi.core import *

class Analysis(BaseModel):
    analysisDbId: Optional[str] = Field(
        None,
        description='Unique identifier for this analysis description',
        example='6191a6bd',
    )
    analysisName: Optional[str] = Field(
        None,
        description='A human readable name for this analysis',
        example='Standard QC',
    )
    created: Optional[datetime] = Field(
        None,
        description='The time at which this record was created, in ISO 8601 format.',
    )
    description: Optional[str] = Field(
        None,
        description='A human readable description of the analysis',
        example='This is a formal description of a QC methodology. Blah blah blah ...',
    )
    software: Optional[List[str]] = Field(
        None,
        description='The software run to generate this analysis.',
        example=['https://github.com/genotyping/QC'],
    )
    type: Optional[str] = Field(None, description='The type of analysis.', example='QC')
    updated: Optional[datetime] = Field(
        None,
        description='The time at which this record was last updated, in ISO 8601 format.',
    )


class DataFormat(Enum):
    DartSeq = 'DartSeq'
    VCF = 'VCF'
    Hapmap = 'Hapmap'
    tabular = 'tabular'
    JSON = 'JSON'


class FileFormat(Enum):
    text_csv = 'text/csv'
    text_tsv = 'text/tsv'
    application_excel = 'application/excel'
    application_zip = 'application/zip'
    application_json = 'application/json'


class AvailableFormat(BaseModel):
    dataFormat: Optional[DataFormat] = Field(
        None,
        description='dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)',
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    fileFormat: Optional[FileFormat] = Field(
        None,
        description='fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.',
    )
    fileURL: Optional[AnyUrl] = Field(
        None,
        description='A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.',
    )
    sepPhased: Optional[str] = Field(
        None,
        description='The string used as a separator for phased allele calls.',
        example='|',
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='/',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='.',
    )


class CallsSearchRequest(BaseModel):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `CallSets` within the given database server',
        example=['a03202ec', '274e4f63'],
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    pageToken: Optional[str] = Field(
        None,
        description='**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ',
        example='33c27874',
    )
    sepPhased: Optional[str] = Field(
        None,
        description='The string used as a separator for phased allele calls.',
        example='|',
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='/',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='.',
    )
    variantDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Variant` within the given database server',
        example=['bba0b258', 'ff97d4f0'],
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `VariantSets` within the given database server',
        example=['407c0508', '49e24dfc'],
    )


class GenomeMap(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    comments: Optional[str] = Field(
        None,
        description='Additional comments about a `GenomeMap`',
        example='Comments about this map',
    )
    commonCropName: str = Field(
        ..., description='The common name of the `Crop`', example='Paw Paw'
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of an object',
        example='https://brapi.org',
    )
    linkageGroupCount: Optional[int] = Field(
        None,
        description='The number of linkage groups present in a `GenomeMap`',
        example=5,
    )
    mapDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a `GenomeMap`',
        example='142cffd5',
    )
    mapName: Optional[str] = Field(
        None,
        description='A human readable name for a `GenomeMap`',
        example='Genome Map 1',
    )
    mapPUI: Optional[str] = Field(
        None,
        description='The DOI or other permanent identifier for a `GenomeMap`',
        example='doi:10.3207/2959859860',
    )
    markerCount: Optional[int] = Field(
        None, description='The number of markers present in a `GenomeMap`', example=1100
    )
    publishedDate: Optional[datetime] = Field(
        None, description='The date this `GenomeMap` was published'
    )
    scientificName: Optional[str] = Field(
        None,
        description='Full scientific binomial format name. This includes Genus, Species, and Sub-species',
        example='Zea mays',
    )
    type: str = Field(
        ...,
        description='The type of map this represents, usually "Genetic" or "Physical"',
        example='Genetic',
    )
    unit: Optional[str] = Field(
        None,
        description='The units used to describe the data in a `GenomeMap`',
        example='cM',
    )


class LinkageGroup(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    linkageGroupName: Optional[str] = Field(
        None,
        description='The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.',
        example='Chromosome 3',
    )
    markerCount: Optional[int] = Field(
        None,
        description='The number of markers associated with a `LinkageGroup`',
        example=150,
    )
    maxPosition: Optional[int] = Field(
        None,
        description='The maximum position of a marker within a `LinkageGroup`',
        example=2500,
    )


class ListValue(BaseModel):
    values: Optional[List[Union[bool, float, str]]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `genotypeValue` or `genotypeMetadata`. Github issue number #491             \n<br>Repeated field of dynamically typed values.',
        example=['AA'],
    )


class MarkerPositionSearchRequest(BaseModel):
    linkageGroupNames: Optional[List[str]] = Field(
        None,
        description='A list of Uniquely Identifiable linkage group names',
        example=['Chromosome 2', 'Chromosome 3'],
    )
    mapDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `GenomeMaps` within the given database server',
        example=['7e6fa8aa', 'bedc418c'],
    )
    maxPosition: Optional[int] = Field(
        None, description='The maximum position of markers in a given map', example=4000
    )
    minPosition: Optional[int] = Field(
        None, description='The minimum position of markers in a given map', example=250
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    variantDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Variants` within the given database server',
        example=['a0caa928', 'f8894a26'],
    )


class Measurement(BaseModel):
    units: Optional[str] = Field(
        None, description='Units (example: "ng/ul")', example='ng/ul'
    )
    value: Optional[float] = Field(
        None, description='Value (example: "2.3")', example=2.3
    )


class OntologyTerm(BaseModel):
    term: Optional[str] = Field(
        None,
        description='Ontology term - the label of the ontology term the termId is pointing to.',
        example='sonic hedgehog',
    )
    termURI: Optional[str] = Field(
        None,
        description="Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.",
        example='MGI:MGI:98297',
    )


class PlateFormat(Enum):
    PLATE_96 = 'PLATE_96'
    TUBES = 'TUBES'


class PlateFormat1(Enum):
    PLATE_96 = 'PLATE_96'
    TUBES = 'TUBES'


class PlateFormat2(Enum):
    PLATE_96 = 'PLATE_96'
    TUBES = 'TUBES'


class SampleType1(Enum):
    DNA = 'DNA'
    RNA = 'RNA'
    TISSUE = 'TISSUE'
    MIXED = 'MIXED'


class PlateSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example=['d745e1e2', '6dd28d74'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example=['3cd0ca36', '983f3b14'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    plateBarcodes: Optional[List[str]] = Field(
        None,
        description='A unique identifier physically attached to the plate',
        example=['11223344', '55667788'],
    )
    plateDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a plate of samples',
        example=['0cac98b8', 'b96125fb'],
    )
    plateNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a plate of samples',
        example=['0cac98b8', 'b96125fb'],
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    sampleDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a sample',
        example=['3bece2ca', 'dd286cc6'],
    )
    sampleGroupDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier for a group of related Samples',
        example=['45e1e2d7', '6cc6dd28'],
    )
    sampleNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of the sample',
        example=['SA_111', 'SA_222'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class ReferenceBases(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.',
        example='3a3d658a',
    )
    offset: Optional[int] = Field(
        None,
        description='The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.',
        example=20000,
    )
    sequence: Optional[str] = Field(
        None,
        description='A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.',
        example='TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT',
    )


class ReferenceSetsSearchRequest(BaseModel):
    accessions: Optional[List[str]] = Field(
        None,
        description='If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).',
        example=['A0009283', 'A0006657'],
    )
    assemblyPUIs: Optional[List[str]] = Field(
        None,
        description='If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).',
        example=['doi:10.15454/312953986E3', 'doi:10.15454/312953986E3'],
    )
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    md5checksums: Optional[List[str]] = Field(
        None,
        description='If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).',
        example=['c2365e900c81a89cf74d83dab60df146'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    referenceSetDbIds: Optional[List[str]] = Field(
        None,
        description='The `ReferenceSets` to search.',
        example=['32a19dd7', '2c182c18'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class ReferencesSearchRequest(BaseModel):
    accessions: Optional[List[str]] = Field(
        None,
        description='If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).',
        example=['A0009283', 'A0006657'],
    )
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    isDerived: Optional[bool] = Field(
        None,
        description='A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.',
    )
    maxLength: Optional[int] = Field(
        None,
        description='The minimum length of this `References` sequence.',
        example=90000,
    )
    md5checksums: Optional[List[str]] = Field(
        None,
        description='If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).',
        example=['c2365e900c81a89cf74d83dab60df146'],
    )
    minLength: Optional[int] = Field(
        None,
        description='The minimum length of this `References` sequence.',
        example=4000,
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    referenceDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `References` within the given database server',
        example=['04c83ea7', 'd0998a34'],
    )
    referenceSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `ReferenceSets` within the given database server',
        example=['32a19dd7', '2c182c18'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class SampleSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a `Germplasm`',
        example=['d745e1e2', '6dd28d74'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies an `ObservationUnit`',
        example=['3cd0ca36', '983f3b14'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    plateDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a `Plate` of `Samples`',
        example=['0cac98b8', 'b96125fb'],
    )
    plateNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a `Plate` of `Samples`',
        example=['0cac98b8', 'b96125fb'],
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    sampleDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a `Sample`',
        example=['3bece2ca', 'dd286cc6'],
    )
    sampleGroupDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier for a group of related `Samples`',
        example=['45e1e2d7', '6cc6dd28'],
    )
    sampleNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of the `Sample`',
        example=['SA_111', 'SA_222'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class VariantSetsExtractRequest(BaseModel):
    callSetDbIds: Optional[List[str]] = Field(
        None, description='The CallSet to search.', example=['9569cfc4', 'da1e888c']
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    sepPhased: Optional[str] = Field(
        None, description='The string used as a separator for phased allele calls.'
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='|',
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='-',
    )
    variantDbIds: Optional[List[str]] = Field(
        None, description='The Variant to search.', example=['c80f068b', 'eb7c5f50']
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None, description='The VariantSet to search.', example=['b2903842', 'dcbb8558']
    )


class VariantSetsSearchRequest(BaseModel):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a CallSet',
        example=['9569cfc4', 'da1e888c'],
    )
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    referenceDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a genotype Reference',
        example=['89ab4d17', '74d3b63d'],
    )
    referenceSetDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a genotype ReferenceSet',
        example=['d3b63d4d', '3b63d74b'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )
    variantDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a Variant',
        example=['c80f068b', 'eb7c5f50'],
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a VariantSet',
        example=['b2903842', 'dcbb8558'],
    )


class VendorContact(BaseModel):
    vendorAddress: Optional[str] = Field(
        None, description='The street address of the vendor', example='123 Main Street'
    )
    vendorCity: Optional[str] = Field(
        None,
        description='The name of the city where the vendor is located',
        example='Townsville',
    )
    vendorContactName: Optional[str] = Field(
        None,
        description='The name or identifier of the primary vendor contact',
        example='Bob Robertson',
    )
    vendorCountry: Optional[str] = Field(
        None,
        description='The name of the country where the vendor is located',
        example='USA',
    )
    vendorDescription: Optional[str] = Field(
        None,
        description='A description of the vendor',
        example='This is a sequencing vendor. Sequencing happens here.',
    )
    vendorEmail: Optional[str] = Field(
        None,
        description='The primary email address used to contact the vendor',
        example='bob@bob.org',
    )
    vendorName: str = Field(
        ...,
        description='The human readable name of the vendor',
        example='The Example Vendor Lab',
    )
    vendorPhone: Optional[str] = Field(
        None,
        description='The primary phone number used to contact the vendor',
        example='+1-800-555-5555',
    )
    vendorURL: Optional[str] = Field(
        None,
        description='The primary URL for the vendor',
        example='https://sequencing.org/vendor',
    )


class VendorOrder(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.',
        example='7b51ad15',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    orderId: str = Field(
        ...,
        description='The order id returned by the vendor when the order was successfully submitted.',
        example='96ba0ca3',
    )
    requiredServiceInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A map of additional data required by the requested service. This includes things like Volume and Concentration.',
        example={
            'extractDNA': 'true',
            'genus': 'Zea',
            'species': 'mays',
            'volumePerWell': '2.3 ml',
        },
    )
    serviceIds: List[str] = Field(
        ...,
        description='A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.',
        example=['e8f60f64', '05bd925a', 'b698fb5e'],
    )


class SampleType2(Enum):
    DNA = 'DNA'
    RNA = 'RNA'
    Tissue = 'Tissue'


class VendorPlateSubmissionId(BaseModel):
    submissionId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.',
        example='f8f409e0',
    )


class SampleType3(Enum):
    DNA = 'DNA'
    RNA = 'RNA'
    Tissue = 'Tissue'


class VendorResultFile(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    clientSampleIds: List[str] = Field(
        ...,
        description='The list of sampleDbIds included in the file',
        example=['3968733e', 'e0de6391', '66854172'],
    )
    fileName: str = Field(
        ..., description='Name of the file', example='sequence_data_ce640bd3.csv'
    )
    fileType: str = Field(..., description='Format of the file', example='text/csv')
    fileURL: AnyUrl = Field(
        ...,
        description='The URL to a file with the results of a vendor analysis',
        example='https://vendor.org/data/sequence_data_ce640bd3.csv',
    )
    md5sum: Optional[str] = Field(
        None,
        description='MD5 Hash Check Sum for the file to confirm download without error',
        example='c2365e900c81a89cf74d83dab60df146',
    )


class CallSetsSearchRequest(BaseModel):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `CallSets` within the given database server',
        example=['6c7486b2', '49c36a73'],
    )
    callSetNames: Optional[List[str]] = Field(
        None,
        description='A list of human readable names associated with `CallSets`',
        example=['Sample_123_DNA_Run_456', 'Sample_789_DNA_Run_101'],
    )
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    sampleDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Samples` within the given database server',
        example=['758d3f6d', '39c0a3f7'],
    )
    sampleNames: Optional[List[str]] = Field(
        None,
        description='A list of human readable names associated with `Samples`',
        example=['Sample_123', 'Sample_789'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `VariantSets` within the given database server',
        example=['8a9a8972', '32a2649a'],
    )


class VariantsSearchRequest(BaseModel):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Parameter unnecessary. Github issue number #474 \n<br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.',
        example=['4639fe3e', 'b60d900b'],
    )
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    end: Optional[int] = Field(
        None,
        description='The end of the window (0-based, exclusive) for which overlapping variants should be returned.',
        example=1500,
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    pageToken: Optional[str] = Field(
        None,
        description='**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ',
        example='33c27874',
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    referenceDbId: Optional[str] = Field(
        None,
        description='**Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472\n<br/>Only return variants on this reference.',
        example='120a2d5c',
    )
    referenceDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a genotype `Reference`',
        example=['89ab4d17', '74d3b63d'],
    )
    referenceSetDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier representing a genotype `ReferenceSet`',
        example=['d3b63d4d', '3b63d74b'],
    )
    start: Optional[int] = Field(
        None,
        description='The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).',
        example=100,
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )
    variantDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Variants`',
        example=['3b63d889', 'ab4d174d'],
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `VariantSets`',
        example=['ba63d810', '434d1760'],
    )


class AlleleMatrixDataMatrices(BaseModel):
    dataMatrix: Optional[List[List[str]]] = Field(
        None,
        description='The two dimensional array of data, providing the allele matrix or an additional layer of metadata associated with each genotype value. Each matrix should be the same size and orientation, aligned with the "callSetDbIds" as columns and the "variantDbIds" as rows.',
        example=[['0|0', '1|0', '1/1'], ['0|0', '1|0', '1/1'], ['0|0', '1|0', '1/1']],
    )
    dataMatrixAbbreviation: Optional[str] = Field(
        None,
        description='The abbreviated code of the field represented in this data matrix. These codes should match the VCF standard when possible and the key word "GT" is reserved for the allele matrix. Examples of other metadata matrices include: "GQ", "RD", and "HQ"\n<br> This maps to a FORMAT field in the VCF file standard.',
        example='GT',
    )
    dataMatrixName: Optional[str] = Field(
        None,
        description='The name of the field represented in this data matrix. The key word "Genotype" is reserved for the allele matrix. Examples of other metadata matrices include: "Genotype Quality", "Read Depth", and "Haplotype Quality"\n<br> This maps to a FORMAT field in the VCF file standard.',
        example='Genotype',
    )
    dataType: Optional[DataType] = Field(
        None,
        description='The type of field represented in this data matrix. This is intended to help parse the data out of JSON.',
        example='string',
    )


class Dimension(Enum):
    CALLSETS = 'CALLSETS'
    VARIANTS = 'VARIANTS'


class AlleleMatrixPagination(BaseModel):
    dimension: Optional[Dimension] = Field(
        None,
        description='The dimension of the matrix being paginated',
        example='VARIANTS',
    )
    page: Optional[int] = Field(
        None, description='the requested page number (zero indexed)', example=0
    )
    pageSize: Optional[int] = Field(
        None,
        description='the maximum number of elements per page in this dimension of the matrix',
        example=500,
    )
    totalCount: Optional[int] = Field(
        None,
        description='The total number of elements that are available on the server and match the requested query parameters.',
        example=10000,
    )
    totalPages: Optional[int] = Field(
        None,
        description='The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br/>totalPages = CEILING( totalCount / requested_page_size)',
        example=20,
    )


class Dimension1(Enum):
    CALLSETS = 'CALLSETS'
    VARIANTS = 'VARIANTS'

class MarkerPosition(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    linkageGroupName: Optional[str] = Field(
        None,
        description='The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.',
        example='Chromosome 3',
    )
    mapDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `GenomeMap`',
        example='3d52bdf3',
    )
    mapName: Optional[str] = Field(
        None,
        description='A human readable name for a `GenomeMap`',
        example='Genome Map 1',
    )
    position: Optional[int] = Field(
        None,
        description='The position of a marker or variant within a `LinkageGroup`',
        example=2390,
    )
    variantDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Variant` within the given database server\n<br> A `Variant` can also represent a Marker ',
        example='a1eb250a',
    )
    variantName: Optional[str] = Field(
        None,
        description='The human readable name for a `Variant`\n<br> A `Variant` can also represent a Marker ',
        example='Marker_2390',
    )

class AlleleMatrixSearchRequestPagination(BaseModel):
    dimension: Optional[Dimension1] = Field(
        None,
        description='the dimension of the matrix being paginated',
        example='VARIANTS',
    )
    page: Optional[int] = Field(
        None, description='the requested page number (zero indexed)', example=0
    )
    pageSize: Optional[int] = Field(
        None,
        description='the maximum number of elements per page in this dimension of the matrix',
        example=500,
    )


class ReferenceSourceGermplasm(BaseModel):
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Germplasm` within the given database server',
        example='d4076594',
    )
    germplasmName: Optional[str] = Field(
        None, description='The human readable name of a `Germplasm`', example='A0000003'
    )


class ReferenceSetSourceGermplasm(BaseModel):
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm within the given database server',
        example='d4076594',
    )
    germplasmName: Optional[str] = Field(
        None, description='The human readable name of a germplasm', example='A0000003'
    )


class VariantSetMetadataFields(BaseModel):
    dataType: Optional[DataType] = Field(
        None,
        description='The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.',
        example='integer',
    )
    fieldAbbreviation: Optional[str] = Field(
        None,
        description='The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: "GQ", "RD", and "HQ"',
        example='GQ',
    )
    fieldName: Optional[str] = Field(
        None,
        description='The name of the field represented in this Genotype Field. Examples include: "Genotype Quality", "Read Depth", and "Haplotype Quality"',
        example='Genotype Quality',
    )


class ShipmentForm(BaseModel):
    fileDescription: Optional[str] = Field(
        None,
        description='The human readable long description for this form',
        example='This is a shipment manifest form',
    )
    fileName: Optional[str] = Field(
        None,
        description='The human readable name for this form',
        example='Shipment Manifest',
    )
    fileURL: AnyUrl = Field(
        ...,
        description='The URL to download this form',
        example='https://vendor.org/forms/manifest.pdf',
    )


class VendorOrderSubmissionRequestConcentration(BaseModel):
    units: Optional[str] = Field(
        None, description='Units (example: "ng/ul")', example='ng/ul'
    )
    value: Optional[float] = Field(
        None, description='Value (example: "2.3")', example=2.3
    )


class VendorOrderSubmissionRequestSamples(BaseModel):
    clientSampleBarCode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this sample',
        example='7c07e527',
    )
    clientSampleId: str = Field(
        ...,
        description='The ID which uniquely identifies this sample to the client making the request',
        example='bd96bd69',
    )
    column: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The Column identifier for this samples location in the plate',
        example=6,
    )
    comments: Optional[str] = Field(
        None,
        description='Generic comments about this sample for the vendor',
        example='This is my favorite sample, please be extra careful with it.',
    )
    concentration: Optional[VendorOrderSubmissionRequestConcentration] = None
    organismName: Optional[str] = Field(
        None, description='Scientific organism name', example='Aspergillus fructus'
    )
    row: Optional[str] = Field(
        None,
        description='The Row identifier for this samples location in the plate',
        example='B',
    )
    speciesName: Optional[str] = Field(
        None, description='Scientific species name', example='Aspergillus fructus'
    )
    taxonomyOntologyReference: Optional[MethodBaseClassOntologyReference] = None
    tissueType: Optional[str] = Field(
        None,
        description='The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.',
        example='Root',
    )
    tissueTypeOntologyReference: Optional[MethodBaseClassOntologyReference] = None
    volume: Optional[VendorOrderSubmissionRequestConcentration] = None
    well: Optional[str] = Field(
        None,
        description='The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.',
        example='B6',
    )


class SampleSubmissionFormat(Enum):
    PLATE_96 = 'PLATE_96'
    TUBES = 'TUBES'


class VendorOrderSubmissionRequestPlates(BaseModel):
    clientPlateBarcode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this plate',
        example='6ebf3f25',
    )
    clientPlateId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this plate to the client making the request',
        example='02a8d6f0',
    )
    sampleSubmissionFormat: Optional[SampleSubmissionFormat] = Field(
        None,
        description='Enum for plate formats, usually "PLATE_96" for a 96 well plate or "TUBES" for plateless format',
        example='PLATE_96',
    )
    samples: Optional[List[VendorOrderSubmissionRequestSamples]] = None


class VendorSpecificationServiceSpecificRequirements(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The value of a key-value entry in a map of Vendor specific requirements',
    )
    key: Optional[str] = Field(
        None,
        description='The key of a key-value entry in a map of Vendor specific requirements',
    )


class GenomeMapListResponseResult(BaseModel):
    data: List[GenomeMap] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class LinkageGroupListResponseResult(BaseModel):
    data: List[LinkageGroup] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class MarkerPositionListResponseResult(BaseModel):
    data: List[MarkerPosition] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class VendorOrderListResponseResult(BaseModel):
    data: List[VendorOrder] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class VendorResultFileListResponseResult(BaseModel):
    data: List[VendorResultFile] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class VendorOrderStatusResponseResult(BaseModel):
    status: Optional[Status] = None


class AlleleMatrix(BaseModel):
    callSetDbIds: List[str] = Field(
        ...,
        description='A list of unique identifiers for the CallSets contained in the matrix response. This array should match the ordering for columns in the matrix. A CallSet is a unique combination of a Sample and a sequencing event. CallSets often have a 1-to-1 relationship with Samples, but this is not always the case.',
        example=['aca00001', 'aca00002', 'aca00003'],
    )
    dataMatrices: Optional[List[AlleleMatrixDataMatrices]] = Field(
        None,
        description='The \'dataMatrices\' are an array of matrix objects that hold the allele data and associated metadata. Each matrix should be the same size and orientation, aligned with the "callSetDbIds" as columns and the "variantDbIds" as rows.',
        example=[
            {
                'dataMatrix': [
                    ['0|0', '1|0', '1/1'],
                    ['0|0', '1|0', '1/1'],
                    ['0|0', '1|0', '1/1'],
                ],
                'dataMatrixAbbreviation': 'GT',
                'dataMatrixName': 'Genotype',
                'dataType': 'string',
            },
            {
                'dataMatrix': [
                    ['48', '48', '43'],
                    ['49', '3', '41'],
                    ['21', '2', '35'],
                ],
                'dataMatrixAbbreviation': 'GQ',
                'dataMatrixName': 'Genotype Quality',
                'dataType': 'integer',
            },
        ],
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    pagination: Optional[List[AlleleMatrixPagination]] = Field(
        None,
        description='Pagination for the matrix',
        example=[
            {
                'dimension': 'VARIANTS',
                'page': 0,
                'pageSize': 500,
                'totalCount': 10000,
                'totalPages': 20,
            },
            {
                'dimension': 'CALLSETS',
                'page': 4,
                'pageSize': 1000,
                'totalCount': 10000,
                'totalPages': 10,
            },
        ],
    )
    sepPhased: Optional[str] = Field(
        None,
        description='The string used as a separator for phased allele calls.',
        example='|',
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='/',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='.',
    )
    variantDbIds: Optional[List[str]] = Field(
        None,
        description='A list of unique identifiers for the Variants contained in the matrix response. This array should match the ordering for rows in the matrix.',
        example=['feb54257', 'feb40355', 'feb40323'],
    )
    variantSetDbIds: List[str] = Field(
        ...,
        description='A list of unique identifiers for the VariantSets contained in the matrix response. A VariantSet is a data set originating from a sequencing event. Often, users will only be interested in data from a single VariantSet, but in some cases a user might be interested in a matrix with data from multiple VariantSets.',
        example=['cfde3944', 'cfde2077', 'cfde4424'],
    )


class AlleleMatrixSearchRequest(BaseModel):
    callSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `CallSets` within the given database server',
        example=['a03202ec', '274e4f63'],
    )
    dataMatrixAbbreviations: Optional[List[str]] = Field(
        None,
        description="`dataMatrixAbbreviations` is a comma seperated list of abbreviations (ie 'GT', 'RD' etc). This list controls which data matrices are returned in the response.",
        example=['GT', 'RD'],
    )
    dataMatrixNames: Optional[List[str]] = Field(
        None,
        description="`dataMatrixNames` is a list of names (ie 'Genotype', 'Read Depth' etc). This list controls which data matrices are returned in the response.",
        example=['Genotype', 'Read Depth'],
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Germplasm` within the given database server',
        example=['a03202ec', '274e4f63'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='A list of human readable `Germplasm` names',
        example=['a03202ec', '274e4f63'],
    )
    germplasmPUIs: Optional[List[str]] = Field(
        None,
        description='A list of permanent unique identifiers associated with `Germplasm`',
        example=['a03202ec', '274e4f63'],
    )
    pagination: Optional[List[AlleleMatrixSearchRequestPagination]] = Field(
        None,
        description='Pagination for the matrix',
        example=[
            {'dimension': 'variants', 'page': 0, 'pageSize': 500},
            {'dimension': 'callsets', 'page': 4, 'pageSize': 1000},
        ],
    )
    positionRanges: Optional[List[str]] = Field(
        None,
        description='The postion range to search\n<br/>\nUses the format "<chrom>:<start>-<end>" where <chrom> is the chromosome name, <start> is \nthe starting position of the range, and <end> is the ending position of the range',
        example=['20:1000-35000', '20:87000-125000'],
    )
    preview: Optional[bool] = Field(
        False,
        description="Default Value = false\n<br/>\nIf 'preview' is set to true, then the server should only return the lists of 'callSetDbIds', \n'variantDbIds', and 'variantSetDbIds'. The server should not return any matrix data. This\nis intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>\nIf 'preview' is set to false or not set (default), then the server should return all the matrix\ndata as requested.",
        example=True,
    )
    sampleDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Samples` within the given database server',
        example=['a03202ec', '274e4f63'],
    )
    sepPhased: Optional[str] = Field(
        None,
        description='The string used as a separator for phased allele calls.',
        example='|',
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='/',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='.',
    )
    variantDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `Variants` within the given database server',
        example=['bba0b258', 'ff97d4f0'],
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='A list of IDs which uniquely identify `VariantSets` within the given database server',
        example=['407c0508', '49e24dfc'],
    )

class CallGenotypeMetadata(BaseModel):
    dataType: Optional[DataType] = Field(
        None,
        description='The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.',
        example='integer',
    )
    fieldAbbreviation: Optional[str] = Field(
        None,
        description='The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: "GQ", "RD", and "HQ"\n<br> This maps to a FORMAT fi\
eld in the VCF file standard.',
        example='GQ',
    )
    fieldName: Optional[str] = Field(
        None,
        description='The name of the field represented in this Genotype Field. Examples include: "Genotype Quality", "Read Depth", and "Haplotype Quality"\n<br> This maps to a FORMAT field in the VCF file standard.',
        example='Genotype Quality',
    )
    fieldValue: Optional[str] = Field(
        None,
        description='The additional metadata value associated with this genotype call',
        example='45.2',
    )

class Call(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    callSetDbId: str = Field(
        ...,
        description='The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.',
        example='16466f55',
    )
    callSetName: Optional[str] = Field(
        None,
        description='The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.',
        example='Sample_123_DNA_Run_456',
    )
    genotype: Optional[ListValue] = None
    genotypeMetadata: Optional[List[CallGenotypeMetadata]] = Field(
        None,
        description='Genotype Metadata are additional layers of metadata associated with each genotype.',
    )
    genotypeValue: Optional[str] = Field(
        None, description='The value of this genotype call', example='1/1'
    )
    genotype_likelihood: Optional[List[float]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `genotypeMetadata`. Github issue number #491             \n<br>The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.',
        example=[1.0],
    )
    phaseSet: Optional[str] = Field(
        None,
        description="If this field is populated, this variant call's genotype ordering implies the phase of the bases and \nis consistent with any other variant calls on the same contig which have the same phase set string.",
        example='6410afc5',
    )
    variantDbId: str = Field(
        ...,
        description='The ID of the variant this call belongs to.',
        example='538c8ecf',
    )
    variantName: Optional[str] = Field(
        None,
        description='The name of the variant this call belongs to.',
        example='Marker A',
    )
    variantSetDbId: str = Field(
        ..., description='The unique identifier for a VariantSet', example='87a6ac1e'
    )
    variantSetName: Optional[str] = Field(
        None,
        description='The human readable name for a VariantSet',
        example='Maize QC DataSet 002334',
    )


class Plate(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    plateBarcode: Optional[str] = Field(
        None,
        description='A unique identifier physically attached to a `Plate`',
        example='11223344',
    )
    plateFormat: Optional[PlateFormat] = Field(
        None,
        description='Enum for plate formats, usually "PLATE_96" for a 96 well plate or "TUBES" for plateless format',
        example='PLATE_96',
    )
    plateName: str = Field(
        ..., description='A human readable name for a `Plate`', example='Plate_123_XYZ'
    )
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Program` within the given database server',
        example='bd748e00',
    )
    sampleType: Optional[SampleType] = Field(
        None,
        description="The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
        example='TISSUE',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Study` within the given database server',
        example='64bd6bf9',
    )
    trialDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Trial` within the given database server',
        example='d34c5349',
    )
class SampleType(Enum):
    DNA = 'DNA'
    RNA = 'RNA'
    TISSUE = 'TISSUE'
    MIXED = 'MIXED'


class PlateNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    plateBarcode: Optional[str] = Field(
        None,
        description='A unique identifier physically attached to a `Plate`',
        example='11223344',
    )
    plateFormat: Optional[PlateFormat2] = Field(
        None,
        description='Enum for plate formats, usually "PLATE_96" for a 96 well plate or "TUBES" for plateless format',
        example='PLATE_96',
    )
    plateName: str = Field(
        ..., description='A human readable name for a `Plate`', example='Plate_123_XYZ'
    )
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Program` within the given database server',
        example='bd748e00',
    )
    sampleType: Optional[SampleType1] = Field(
        None,
        description="The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
        example='TISSUE',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Study` within the given database server',
        example='64bd6bf9',
    )
    trialDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Trial` within the given database server',
        example='d34c5349',
    )


class Reference(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    commonCropName: Optional[str] = Field(
        None, description='Common name for the crop', example='Maize'
    )
    externalReferences: Optional[ExternalReferences] = None
    isDerived: Optional[bool] = Field(
        None,
        description='A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.',
        example=False,
    )
    length: Optional[int] = Field(
        None, description='The length of this `Reference` sequence.', example=50000000
    )
    md5checksum: Optional[str] = Field(
        None,
        description='The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    referenceDbId: str = Field(
        ..., description='The unique identifier for a `Reference`', example='fc0a81d0'
    )
    referenceName: str = Field(
        ...,
        description='The human readable name of a `Reference` within a `ReferenceSet`.',
        example='Chromosome 2',
    )
    referenceSetDbId: Optional[str] = Field(
        None,
        description='The unique identifier for a `ReferenceSet`',
        example='c1ecfef1',
    )
    referenceSetName: Optional[str] = Field(
        None,
        description='The human readable name of a `ReferenceSet`',
        example='The Best Assembly Ever',
    )
    sourceAccessions: Optional[List[str]] = Field(
        None,
        description='All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.',
        example=['GCF_000001405.26'],
    )
    sourceDivergence: Optional[float] = Field(
        None,
        description='The `sourceDivergence` is the fraction of non-indel bases that do not match the `Reference` this message was derived from.',
        example=0.01,
    )
    sourceGermplasm: Optional[List[ReferenceSourceGermplasm]] = Field(
        None, description='All known corresponding Germplasm'
    )
    sourceURI: Optional[str] = Field(
        None,
        description='The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.',
        example='https://wiki.brapi.org/files/demo.fast',
    )
    species: Optional[OntologyTerm] = None


class ReferenceSet(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    assemblyPUI: Optional[str] = Field(
        None,
        description='The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.',
        example='doi://10.12345/fake/9876',
    )
    commonCropName: Optional[str] = Field(
        None, description='Common name for the crop', example='Maize'
    )
    description: Optional[str] = Field(
        None,
        description='Optional free text description of this reference set.',
        example='This is an example description for an assembly',
    )
    externalReferences: Optional[ExternalReferences] = None
    isDerived: Optional[bool] = Field(
        None,
        description='A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).',
    )
    md5checksum: Optional[str] = Field(
        None,
        description='Order-independent MD5 checksum which identifies this `ReferenceSet`.\n\nTo compute this checksum, make a list of `Reference.md5checksum` for all\n`Reference` s in this set. Then sort that list, and take the MD5 hash of\nall the strings concatenated together. Express the hash as a lower-case\nhexadecimal string.',
        example='c2365e900c81a89cf74d83dab60df146',
    )
    referenceSetDbId: str = Field(
        ..., description='The unique identifier for a ReferenceSet', example='c1ecfef1'
    )
    referenceSetName: str = Field(
        ...,
        description='The human readable name of a ReferenceSet',
        example='The Best Assembly Ever',
    )
    sourceAccessions: Optional[List[str]] = Field(
        None,
        description='All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.',
        example=['A0000002', 'A0009393'],
    )
    sourceGermplasm: Optional[List[ReferenceSetSourceGermplasm]] = Field(
        None, description='All known corresponding Germplasm'
    )
    sourceURI: Optional[str] = Field(
        None,
        description='Specifies a FASTA format file/string.',
        example='https://wiki.brapi.org/files/demo.fast',
    )
    species: Optional[OntologyTerm] = None


class Sample(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    column: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The Column identifier for this `Sample` location in the `Plate`',
        example=6,
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Germplasm`',
        example='7e08d538',
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an `ObservationUnit`',
        example='073a3ce5',
    )
    plateDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Plate` of `Sample`',
        example='2dce16d1',
    )
    plateName: Optional[str] = Field(
        None,
        description='The human readable name of a `Plate`',
        example='Plate_alpha_20191022',
    )
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Program` within the given database server',
        example='bd748e00',
    )
    row: Optional[str] = Field(
        None,
        description='The Row identifier for this `Sample` location in the `Plate`',
        example='B',
    )
    sampleBarcode: Optional[str] = Field(
        None,
        description='A unique identifier physically attached to the `Sample`',
        example='3a027b59',
    )
    sampleDescription: Optional[str] = Field(
        None,
        description='Description of a `Sample`\n<br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.',
        example='This sample was taken from the root of a tree',
    )
    sampleGroupDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a group of `Samples`',
        example='8524b436',
    )
    sampleName: str = Field(
        ...,
        description='The human readable name of the `Sample`',
        example='Sample_alpha_20191022',
    )
    samplePUI: Optional[str] = Field(
        None,
        description='A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)\n<br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ',
        example='doi:10.15454/312953986E3',
    )
    sampleTimestamp: Optional[datetime] = Field(
        None,
        description='The date and time a `Sample` was collected from the field\n<br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested',
    )
    sampleType: Optional[str] = Field(
        None,
        description="The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc",
        example='Tissue',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Study` within the given database server',
        example='64bd6bf9',
    )
    takenBy: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which took the `Sample` from the field',
        example='Bob',
    )
    tissueType: Optional[str] = Field(
        None,
        description="The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n<br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
        example='Root',
    )
    trialDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Trial` within the given database server',
        example='d34c5349',
    )
    well: Optional[str] = Field(
        None,
        description='The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.',
        example='B6',
    )


class SampleNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    column: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The Column identifier for this `Sample` location in the `Plate`',
        example=6,
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Germplasm`',
        example='7e08d538',
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an `ObservationUnit`',
        example='073a3ce5',
    )
    plateDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Plate` of `Sample`',
        example='2dce16d1',
    )
    plateName: Optional[str] = Field(
        None,
        description='The human readable name of a `Plate`',
        example='Plate_alpha_20191022',
    )
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Program` within the given database server',
        example='bd748e00',
    )
    row: Optional[str] = Field(
        None,
        description='The Row identifier for this `Sample` location in the `Plate`',
        example='B',
    )
    sampleBarcode: Optional[str] = Field(
        None,
        description='A unique identifier physically attached to the `Sample`',
        example='3a027b59',
    )
    sampleDescription: Optional[str] = Field(
        None,
        description='Description of a `Sample`\n<br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.',
        example='This sample was taken from the root of a tree',
    )
    sampleGroupDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a group of `Samples`',
        example='8524b436',
    )
    sampleName: str = Field(
        ...,
        description='The human readable name of the `Sample`',
        example='Sample_alpha_20191022',
    )
    samplePUI: Optional[str] = Field(
        None,
        description='A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)\n<br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ',
        example='doi:10.15454/312953986E3',
    )
    sampleTimestamp: Optional[datetime] = Field(
        None,
        description='The date and time a `Sample` was collected from the field\n<br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested',
    )
    sampleType: Optional[str] = Field(
        None,
        description="The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc",
        example='Tissue',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Study` within the given database server',
        example='64bd6bf9',
    )
    takenBy: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which took the `Sample` from the field',
        example='Bob',
    )
    tissueType: Optional[str] = Field(
        None,
        description="The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n<br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
        example='Root',
    )
    trialDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a `Trial` within the given database server',
        example='d34c5349',
    )
    well: Optional[str] = Field(
        None,
        description='The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.',
        example='B6',
    )


class Variant(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    alternateBases: Optional[List[str]] = Field(
        None,
        description='The bases that appear instead of the reference bases. Multiple alternate alleles are possible.',
        example=['T', 'TAC'],
    )
    alternate_bases: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `alternateBases`. Github issue number #549\n<br>The bases that appear instead of the reference bases. Multiple alternate alleles are possible.',
        example=['T', 'TAC'],
    )
    ciend: Optional[List[int]] = Field(
        None,
        description='Similar to "cipos", but for the variant\'s end position (which is derived from start + svlen).',
        example=[-1000, 0],
    )
    cipos: Optional[List[int]] = Field(
        None,
        description='In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. "cipos" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCF v4.2',
        example=[-12000, 1000],
    )
    created: Optional[datetime] = Field(
        None, description='The timestamp when this variant was created.'
    )
    end: Optional[int] = Field(
        None,
        description='This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n<br>The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`.',
        example=518,
    )
    externalReferences: Optional[ExternalReferences] = None
    filtersApplied: Optional[bool] = Field(
        None,
        description='True if filters were applied for this variant. VCF column 7 "FILTER" any value other than the missing value.',
        example=True,
    )
    filtersFailed: Optional[List[str]] = Field(
        None,
        description='Zero or more filters that failed for this variant. VCF column 7 "FILTER" shared across all alleles in the same VCF record.',
        example=['d629a669', '3f14f578'],
    )
    filtersPassed: Optional[bool] = Field(
        None,
        description='True if all filters for this variant passed. VCF column 7 "FILTER" value PASS.',
        example=True,
    )
    referenceBases: Optional[str] = Field(
        None,
        description='The reference bases for this variant. They start at the given start position.',
        example='A',
    )
    referenceDbId: Optional[str] = Field(
        None, description='The unique identifier for a Reference', example='fc0a81d0'
    )
    referenceName: Optional[str] = Field(
        None,
        description='The reference on which this variant occurs. (e.g. `chr_20` or `X`)',
        example='chr_20',
    )
    referenceSetDbId: Optional[str] = Field(
        None, description='The unique identifier for a ReferenceSet', example='c1ecfef1'
    )
    referenceSetName: Optional[str] = Field(
        None,
        description='The human readable name of the ReferenceSet',
        example='The Best Assembly Ever',
    )
    start: Optional[int] = Field(
        None,
        description='This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n<br> The start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0).',
        example=500,
    )
    svlen: Optional[int] = Field(
        None,
        description='Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2',
        example=1500,
    )
    updated: Optional[datetime] = Field(
        None, description='The time at which this variant was last updated.'
    )
    variantDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a `Variant`',
        example='628e89c5',
    )
    variantNames: Optional[List[str]] = Field(
        None,
        description='A human readable name associated with a `Variant`',
        example=['RefSNP_ID_1', '06ea312e'],
    )
    variantSetDbId: Optional[List[str]] = Field(
        None,
        description='An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.',
        example=['c8ae400b', 'ef2c204b'],
    )
    variantType: Optional[str] = Field(
        None,
        description='The "variant_type" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following "start"\n  DEL  : deletion of sequence following "start"',
        example='DUP',
    )


class VariantSet(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    analysis: Optional[List[Analysis]] = Field(
        None, description='Set of Analysis descriptors for this VariantSet'
    )
    availableFormats: Optional[List[AvailableFormat]] = Field(
        None,
        description="When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n<br/>'dataFormat' defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n<br/>'fileFormat' defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
    )
    callSetCount: Optional[int] = Field(
        None,
        description='The number of CallSets included in this VariantSet',
        example=341,
    )
    externalReferences: Optional[ExternalReferences] = None
    metadataFields: Optional[List[VariantSetMetadataFields]] = Field(
        None,
        description="The 'metadataFields' array indicates which types of genotyping data and metadata are available in the VariantSet. \n<br> When possible, these field names and abbreviations should follow the VCF standard ",
    )
    referenceSetDbId: Optional[str] = Field(
        None,
        description='The ID of the reference set that describes the sequences used by the variants in this set.',
        example='57eae639',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID of the dataset this variant set belongs to.',
        example='2fc3b034',
    )
    variantCount: Optional[int] = Field(
        None,
        description='The number of Variants included in this VariantSet',
        example=250,
    )
    variantSetDbId: str = Field(
        ..., description='The unique identifier for a VariantSet', example='87a6ac1e'
    )
    variantSetName: Optional[str] = Field(
        None,
        description='The human readable name for a VariantSet',
        example='Maize QC DataSet 002334',
    )


class VendorOrderSubmission(BaseModel):
    orderId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the order',
        example='b5144468',
    )
    shipmentForms: Optional[List[ShipmentForm]] = Field(
        None,
        description='Array of paper forms which need to be printed and included with the physical shipment',
    )


class VendorOrderSubmissionRequest(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.',
        example='b8aac350',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    plates: List[VendorOrderSubmissionRequestPlates] = Field(
        ..., description='Array of new plates to be submitted to a vendor'
    )
    requiredServiceInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A map of additional data required by the requested service. This includes things like Volume and Concentration.',
        example={
            'extractDNA': True,
            'genus': 'Zea',
            'species': 'mays',
            'volumePerWell': '2.3 ml',
        },
    )
    sampleType: SampleType2 = Field(
        ..., description='The type of Samples being submitted', example='Tissue'
    )
    serviceIds: List[str] = Field(
        ...,
        description='A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.',
        example=['e8f60f64', '05bd925a', 'b698fb5e'],
    )


class VendorPlateSubmissionRequest(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.',
        example='b8aac350',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    plates: List[VendorOrderSubmissionRequestPlates] = Field(
        ..., description='Array of new plates to be submitted to a vendor'
    )
    sampleType: SampleType3 = Field(
        ..., description='The type of Samples being submitted', example='Tissue'
    )


class VendorSample(BaseModel):
    clientSampleBarCode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this sample',
        example='7c07e527',
    )
    clientSampleId: str = Field(
        ...,
        description='The ID which uniquely identifies this sample to the client making the request',
        example='bd96bd69',
    )
    column: Optional[conint(ge=1, le=12)] = Field(
        None,
        description='The Column identifier for this samples location in the plate',
        example=6,
    )
    comments: Optional[str] = Field(
        None,
        description='Generic comments about this sample for the vendor',
        example='This is my favorite sample, please be extra careful with it.',
    )
    concentration: Optional[VendorOrderSubmissionRequestConcentration] = None
    organismName: Optional[str] = Field(
        None, description='Scientific organism name', example='Aspergillus fructus'
    )
    row: Optional[str] = Field(
        None,
        description='The Row identifier for this samples location in the plate',
        example='B',
    )
    speciesName: Optional[str] = Field(
        None, description='Scientific species name', example='Aspergillus fructus'
    )
    taxonomyOntologyReference: Optional[MethodBaseClassOntologyReference] = None
    tissueType: Optional[str] = Field(
        None,
        description='The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.',
        example='Root',
    )
    tissueTypeOntologyReference: Optional[MethodBaseClassOntologyReference] = None
    volume: Optional[VendorOrderSubmissionRequestConcentration] = None
    well: Optional[str] = Field(
        None,
        description='The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.',
        example='B6',
    )
    
class ServicePlatformMarkerType(Enum):
    FIXED = 'FIXED'
    DISCOVERABLE = 'DISCOVERABLE'


class VendorSpecificationService(BaseModel):
    serviceDescription: Optional[str] = Field(
        None,
        description='Description of the vendor platform',
        example='A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines.',
    )
    serviceId: str = Field(
        ..., description='Unique identifier for this service', example='085d298f'
    )
    serviceName: str = Field(
        ...,
        description='The human readable name of a platform',
        example='The Deluxe Service',
    )
    servicePlatformMarkerType: Optional[ServicePlatformMarkerType] = Field(
        None,
        description='The type of markers used in this services platform',
        example='FIXED',
    )
    servicePlatformName: Optional[str] = Field(
        None,
        description='The technology platform used by this service',
        example='RNA-seq',
    )
    specificRequirements: Optional[
        List[VendorSpecificationServiceSpecificRequirements]
    ] = Field(
        None,
        description='Additional arbitrary requirements for a particular platform',
        example=[
            {'description': 'The genus of the samples', 'key': 'genus'},
            {'description': 'The species of the samples', 'key': 'species'},
            {
                'description': 'Approximate volume of each sample (ex 2.3 ml)',
                'key': 'volumePerWell',
            },
            {
                'description': 'Does DNA extraction need to happen before sequencing (ex true)',
                'key': 'extractDNA',
            },
        ],
    )


class AlleleMatrixResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: AlleleMatrix


class GenomeMapListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GenomeMapListResponseResult


class GenomeMapSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: GenomeMap


class LinkageGroupListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: LinkageGroupListResponseResult


class MarkerPositionListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: MarkerPositionListResponseResult


class PlateSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Plate


class ReferenceSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Reference


class ReferenceBasesResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferenceBases


class ReferenceSetsSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferenceSet


class SampleSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Sample


class VariantSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Variant


class VariantSetResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VariantSet


class VendorOrderListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorOrderListResponseResult


class VendorOrderSubmissionSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Optional[Metadata] = None
    result: Optional[VendorOrderSubmission] = None


class VendorResultFileListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorResultFileListResponseResult


class VendorOrderStatusResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorOrderStatusResponseResult


class VendorPlateSubmissionIdSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorPlateSubmissionId


class VendorPlateSubmissionPlates(BaseModel):
    clientPlateBarcode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this plate',
        example='bfb33593',
    )
    clientPlateId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this plate to the client making the request',
        example='dae8f49d',
    )
    sampleSubmissionFormat: Optional[PlateFormat1] = None
    samples: Optional[List[VendorSample]] = None


class CallsListResponseResult(BaseModel):
    data: List[Call] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )
    expandHomozygotes: Optional[bool] = Field(
        None,
        description='Should homozygotes be expanded (true) or collapsed into a single occurrence (false)',
        example=True,
    )
    sepPhased: Optional[str] = Field(
        None,
        description='The string used as a separator for phased allele calls.',
        example='|',
    )
    sepUnphased: Optional[str] = Field(
        None,
        description='The string used as a separator for unphased allele calls.',
        example='/',
    )
    unknownString: Optional[str] = Field(
        None,
        description='The string used as a representation for missing data.',
        example='.',
    )


class PlateListResponseResult(BaseModel):
    data: List[Plate] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ReferencesListResponseResult(BaseModel):
    data: List[Reference] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ReferenceSetsListResponseResult(BaseModel):
    data: List[ReferenceSet] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class SampleListResponseResult(BaseModel):
    data: List[Sample] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class VariantsListResponseResult(BaseModel):
    data: List[Variant] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class VariantSetsListResponseResult(BaseModel):
    data: List[VariantSet] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class PlatesPutRequest(BaseModel):
    __root__: Optional[Dict[str, PlateNewRequest]] = None


class SamplesPutRequest(BaseModel):
    __root__: Optional[Dict[str, SampleNewRequest]] = None


class CallSet(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    callSetDbId: str = Field(
        ...,
        description='The ID which uniquely identifies a CallSet within the given database server',
        example='eb2bfd3d',
    )
    callSetName: Optional[str] = Field(
        None,
        description='The human readable name which identifies a germplasm within the given database server',
        example='Sample_123_DNA_Run_456',
    )
    created: Optional[datetime] = Field(
        None, description='The date this call set was created'
    )
    externalReferences: Optional[ExternalReferences] = None
    sampleDbId: Optional[str] = Field(
        None,
        description='The Biosample entity the call set data was generated from.',
        example='5e50e11d',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='708149c1',
    )
    updated: Optional[datetime] = Field(
        None, description='The time at which this call set was last updated'
    )
    variantSetDbIds: Optional[List[str]] = Field(
        None,
        description='The IDs of the variantSets this callSet has calls in.',
        example=['cfd3d60f', 'a4e8bfe9'],
    )


class VendorPlate(BaseModel):
    clientPlateBarcode: Optional[str] = Field(
        None,
        description='(Optional) The value of the bar code attached to this plate',
        example='31dd5787',
    )
    clientPlateId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies this plate to the client making the request',
        example='0ad6c0ef',
    )
    sampleSubmissionFormat: Optional[PlateFormat1] = None
    samples: Optional[List[VendorSample]] = None


class VendorPlateSubmission(BaseModel):
    clientId: str = Field(
        ...,
        description='A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.',
        example='e470ae0d',
    )
    numberOfSamples: int = Field(
        ...,
        description='The total number of samples contained in this request. Used for billing and basic validation of the request.',
        example=180,
    )
    plates: List[VendorPlateSubmissionPlates] = Field(
        ..., description='Array of new plates to be submitted to a vendor'
    )


class VendorSpecification(BaseModel):
    additionalInfo: Optional[Dict[str, Dict[str, Any]]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    services: Optional[List[VendorSpecificationService]] = Field(
        None, description='List of platform specifications available at the vendor'
    )
    vendorContact: Optional[VendorContact] = None


class CallsListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: MetadataTokenPagination
    result: CallsListResponseResult


class CallSetResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CallSet


class PlateListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: PlateListResponseResult


class ReferencesListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferencesListResponseResult


class ReferenceSetsListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ReferenceSetsListResponseResult


class SampleListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: SampleListResponseResult


class VariantsListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: MetadataTokenPagination
    result: VariantsListResponseResult


class VariantSetsListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VariantSetsListResponseResult


class VendorPlateSubmissionSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorPlateSubmission


class VendorSpecificationSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorSpecification


class CallSetsListResponseResult(BaseModel):
    data: List[CallSet] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class VendorPlateListResponseResult(BaseModel):
    data: List[VendorPlate] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class CallSetsListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: CallSetsListResponseResult


class VendorPlateListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: VendorPlateListResponseResult
