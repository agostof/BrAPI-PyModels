# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Core-2.1-resolved.yaml
#   timestamp: 2023-03-20T19:02:13+00:00

from __future__ import annotations

from datetime import date
from typing import List, Optional, Union

from fastapi import FastAPI, Header, Path, Query
from pydantic import constr

from .models import (
    CommonCropNamesResponse,
    ContentTypes,
    Field202AcceptedSearchResponse,
    ListNewRequest,
    ListResponse,
    ListSearchRequest,
    ListsListResponse,
    ListsSingleResponse,
    ListTypes,
    LocationListResponse,
    LocationNewRequest,
    LocationSearchRequest,
    LocationSingleResponse,
    PersonListResponse,
    PersonNewRequest,
    PersonSearchRequest,
    PersonSingleResponse,
    ProgramListResponse,
    ProgramNewRequest,
    ProgramSearchRequest,
    ProgramSingleResponse,
    ProgramType4,
    ProgramType5,
    Season,
    SeasonListResponse,
    SeasonSingleResponse,
    ServerInfoResponse,
    SortBy1,
    SortBy2,
    SortBy3,
    SortBy4,
    SortOrder2,
    SortOrder3,
    SortOrder5,
    SortOrder6,
    StudyListResponse,
    StudyNewRequest,
    StudySearchRequest,
    StudySingleResponse,
    StudyTypesResponse,
    TrialListResponse,
    TrialNewRequest,
    TrialSearchRequest,
    TrialSingleResponse,
)

app = FastAPI(
    title='BrAPI-Core',
    description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/RESTfulness">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Response_Structure">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Dates_and_Times">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Location_Coordinates">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Error_Handling">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Search_Services">Search Services</a></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore21.docs.apiary.io">Apiary</a></div>\n<div class="version-number">V2.0</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.0/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.0">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore20.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
    version='2.1',
    servers=[{'url': 'https://test-server.brapi.org/brapi/v2'}],
)


@app.get(
    '/commoncropnames',
    response_model=CommonCropNamesResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Common Crop Names'],
)
def get_commoncropnames(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[CommonCropNamesResponse, str]:
    """
    Get the Common Crop Names
    """
    pass


@app.get(
    '/lists',
    response_model=ListsListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Lists'],
)
def get_lists(
    list_type: Optional[ListTypes] = Query(None, alias='listType'),
    list_name: Optional[str] = Query(None, alias='listName'),
    list_db_id: Optional[str] = Query(None, alias='listDbId'),
    list_source: Optional[str] = Query(None, alias='listSource'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ListsListResponse, str]:
    """
    Get filtered set of generic lists
    """
    pass


@app.post(
    '/lists',
    response_model=ListsListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Lists'],
)
def post_lists(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ListNewRequest] = None,
) -> Union[ListsListResponse, str]:
    """
    Create New List Objects
    """
    pass


@app.get(
    '/lists/{list_db_id}',
    response_model=ListsSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Lists'],
)
def get_lists_list_db_id(
    list_db_id: str = Path(..., alias='listDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ListsSingleResponse, str]:
    """
    Get the details of a specific List
    """
    pass


@app.put(
    '/lists/{list_db_id}',
    response_model=ListsSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Lists'],
)
def put_lists_list_db_id(
    list_db_id: str = Path(..., alias='listDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ListNewRequest = None,
) -> Union[ListsSingleResponse, str]:
    """
    Update an existing generic list
    """
    pass


@app.post(
    '/lists/{list_db_id}/data',
    response_model=ListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Lists'],
)
def post_lists_list_db_id_data(
    list_db_id: str = Path(..., alias='listDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[str] = None,
) -> Union[ListResponse, str]:
    """
    Add new data members to a specific List
    """
    pass


@app.post(
    '/lists/{list_db_id}/items',
    response_model=ListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Lists'],
)
def post_lists_list_db_id_items(
    list_db_id: str = Path(..., alias='listDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[str] = None,
) -> Union[ListResponse, str]:
    """
    Add Items to a specific List
    """
    pass


@app.get(
    '/locations',
    response_model=LocationListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Locations'],
)
def get_locations(
    location_type: Optional[str] = Query(None, alias='locationType'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    location_name: Optional[str] = Query(None, alias='locationName'),
    parent_location_db_id: Optional[str] = Query(None, alias='parentLocationDbId'),
    parent_location_name: Optional[str] = Query(None, alias='parentLocationName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[LocationListResponse, str]:
    """
    Get a filtered list of Locations
    """
    pass


@app.post(
    '/locations',
    response_model=LocationListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Locations'],
)
def post_locations(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[LocationNewRequest] = None,
) -> Union[LocationListResponse, str]:
    """
    Create new Locations
    """
    pass


@app.get(
    '/locations/{location_db_id}',
    response_model=LocationSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Locations'],
)
def get_locations_location_db_id(
    location_db_id: str = Path(..., alias='locationDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[LocationSingleResponse, str]:
    """
    Get the details of a specific Location
    """
    pass


@app.put(
    '/locations/{location_db_id}',
    response_model=LocationSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Locations'],
)
def put_locations_location_db_id(
    location_db_id: str = Path(..., alias='locationDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: LocationNewRequest = None,
) -> Union[LocationSingleResponse, str]:
    """
    Update the details for an existing Location
    """
    pass


@app.get(
    '/people',
    response_model=PersonListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['People'],
)
def get_people(
    first_name: Optional[str] = Query(None, alias='firstName'),
    last_name: Optional[str] = Query(None, alias='lastName'),
    person_db_id: Optional[str] = Query(None, alias='personDbId'),
    user_i_d: Optional[str] = Query(None, alias='userID'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[PersonListResponse, str]:
    """
    Get filtered list of People
    """
    pass


@app.post(
    '/people',
    response_model=PersonListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['People'],
)
def post_people(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[PersonNewRequest] = None,
) -> Union[PersonListResponse, str]:
    """
    Create new People
    """
    pass


@app.get(
    '/people/{person_db_id}',
    response_model=PersonSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['People'],
)
def get_people_person_db_id(
    person_db_id: str = Path(..., alias='personDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[PersonSingleResponse, str]:
    """
    Get the details for a specific Person
    """
    pass


@app.put(
    '/people/{person_db_id}',
    response_model=PersonSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['People'],
)
def put_people_person_db_id(
    person_db_id: str = Path(..., alias='personDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: PersonNewRequest = None,
) -> Union[PersonSingleResponse, str]:
    """
    Update an existing Person
    """
    pass


@app.get(
    '/programs',
    response_model=ProgramListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Programs'],
)
def get_programs(
    abbreviation: Optional[str] = None,
    program_type: Optional[ProgramType5] = Query(None, alias='programType'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    program_name: Optional[str] = Query(None, alias='programName'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ProgramListResponse, str]:
    """
    Get a filtered list of breeding Programs
    """
    pass


@app.post(
    '/programs',
    response_model=ProgramListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Programs'],
)
def post_programs(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ProgramNewRequest] = None,
) -> Union[ProgramListResponse, str]:
    """
    Add new breeding Programs to the database
    """
    pass


@app.get(
    '/programs/{program_db_id}',
    response_model=ProgramSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Programs'],
)
def get_programs_program_db_id(
    program_db_id: str = Path(..., alias='programDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ProgramSingleResponse, str]:
    """
    Get a breeding Program by Id
    """
    pass


@app.put(
    '/programs/{program_db_id}',
    response_model=ProgramSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Programs'],
)
def put_programs_program_db_id(
    program_db_id: str = Path(..., alias='programDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ProgramNewRequest = None,
) -> Union[ProgramSingleResponse, str]:
    """
    Update an existing Program
    """
    pass


@app.post(
    '/search/lists',
    response_model=ListsListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Lists'],
)
def post_search_lists(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ListSearchRequest = None,
) -> Union[ListsListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for Lists
    """
    pass


@app.get(
    '/search/lists/{search_results_db_id}',
    response_model=ListsListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Lists'],
)
def get_search_lists_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ListsListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `List` search request
    """
    pass


@app.post(
    '/search/locations',
    response_model=LocationListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Locations'],
)
def post_search_locations(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: LocationSearchRequest = None,
) -> Union[LocationListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Locations`
    """
    pass


@app.get(
    '/search/locations/{search_results_db_id}',
    response_model=LocationListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Locations'],
)
def get_search_locations_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[LocationListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Locations` search request
    """
    pass


@app.post(
    '/search/people',
    response_model=PersonListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['People'],
)
def post_search_people(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: PersonSearchRequest = None,
) -> Union[PersonListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `People`
    """
    pass


@app.get(
    '/search/people/{search_results_db_id}',
    response_model=PersonListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['People'],
)
def get_search_people_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[PersonListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `People` search request
    """
    pass


@app.post(
    '/search/programs',
    response_model=ProgramListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Programs'],
)
def post_search_programs(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ProgramSearchRequest = None,
) -> Union[ProgramListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Programs`
    """
    pass


@app.get(
    '/search/programs/{search_results_db_id}',
    response_model=ProgramListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Programs'],
)
def get_search_programs_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ProgramListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Programs` search request
    """
    pass


@app.post(
    '/search/studies',
    response_model=StudyListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Studies'],
)
def post_search_studies(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: StudySearchRequest = None,
) -> Union[StudyListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Studies`
    """
    pass


@app.get(
    '/search/studies/{search_results_db_id}',
    response_model=StudyListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Studies'],
)
def get_search_studies_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[StudyListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Studies` search request
    """
    pass


@app.post(
    '/search/trials',
    response_model=TrialListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Trials'],
)
def post_search_trials(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: TrialSearchRequest = None,
) -> Union[TrialListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Trials`
    """
    pass


@app.get(
    '/search/trials/{search_results_db_id}',
    response_model=TrialListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Trials'],
)
def get_search_trials_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[TrialListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Trials` search request
    """
    pass


@app.get(
    '/seasons',
    response_model=SeasonListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seasons'],
)
def get_seasons(
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    season: Optional[str] = None,
    season_name: Optional[str] = Query(None, alias='seasonName'),
    year: Optional[int] = None,
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[SeasonListResponse, str]:
    """
    Get the Seasons
    """
    pass


@app.post(
    '/seasons',
    response_model=SeasonListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seasons'],
)
def post_seasons(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[Season] = None,
) -> Union[SeasonListResponse, str]:
    """
    POST new Seasons
    """
    pass


@app.get(
    '/seasons/{season_db_id}',
    response_model=SeasonSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seasons'],
)
def get_seasons_season_db_id(
    season_db_id: str = Path(..., alias='seasonDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[SeasonSingleResponse, str]:
    """
    Get the a single Season
    """
    pass


@app.put(
    '/seasons/{season_db_id}',
    response_model=SeasonSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seasons'],
)
def put_seasons_season_db_id(
    season_db_id: str = Path(..., alias='seasonDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: Season = None,
) -> Union[SeasonSingleResponse, str]:
    """
    Update existing Seasons
    """
    pass


@app.get(
    '/serverinfo',
    response_model=ServerInfoResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Server Info'],
)
def get_serverinfo(
    content_type: Optional[ContentTypes] = Query(None, alias='contentType'),
    data_type: Optional[ContentTypes] = Query(None, alias='dataType'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ServerInfoResponse, str]:
    """
    Get the list of implemented Calls
    """
    pass


@app.get(
    '/studies',
    response_model=StudyListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Studies'],
)
def get_studies(
    study_type: Optional[str] = Query(None, alias='studyType'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    study_code: Optional[str] = Query(None, alias='studyCode'),
    study_p_u_i: Optional[str] = Query(None, alias='studyPUI'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    active: Optional[bool] = None,
    sort_by: Optional[SortBy2] = Query(None, alias='sortBy'),
    sort_order: Optional[SortOrder3] = Query(None, alias='sortOrder'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    study_name: Optional[str] = Query(None, alias='studyName'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[StudyListResponse, str]:
    """
    Get a filtered list of Studies
    """
    pass


@app.post(
    '/studies',
    response_model=StudyListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Studies'],
)
def post_studies(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[StudyNewRequest] = None,
) -> Union[StudyListResponse, str]:
    """
    Create new Studies.
    """
    pass


@app.get(
    '/studies/{study_db_id}',
    response_model=StudySingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Studies'],
)
def get_studies_study_db_id(
    study_db_id: str = Path(..., alias='studyDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[StudySingleResponse, str]:
    """
    Get the details for a specific Study
    """
    pass


@app.put(
    '/studies/{study_db_id}',
    response_model=StudySingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Studies'],
)
def put_studies_study_db_id(
    study_db_id: str = Path(..., alias='studyDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: StudyNewRequest = None,
) -> Union[StudySingleResponse, str]:
    """
    Update an existing Study
    """
    pass


@app.get(
    '/studytypes',
    response_model=StudyTypesResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Studies'],
)
def get_studytypes(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[StudyTypesResponse, str]:
    """
    Get the Study Types
    """
    pass


@app.get(
    '/trials',
    response_model=TrialListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Trials'],
)
def get_trials(
    active: Optional[bool] = None,
    contact_db_id: Optional[str] = Query(None, alias='contactDbId'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    search_date_range_start: Optional[date] = Query(None, alias='searchDateRangeStart'),
    search_date_range_end: Optional[date] = Query(None, alias='searchDateRangeEnd'),
    trial_p_u_i: Optional[str] = Query(None, alias='trialPUI'),
    sort_by: Optional[SortBy4] = Query(None, alias='sortBy'),
    sort_order: Optional[SortOrder6] = Query(None, alias='sortOrder'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    trial_name: Optional[str] = Query(None, alias='trialName'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[TrialListResponse, str]:
    """
    Get a filtered list of Trials
    """
    pass


@app.post(
    '/trials',
    response_model=TrialListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Trials'],
)
def post_trials(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[TrialNewRequest] = None,
) -> Union[TrialListResponse, str]:
    """
    Create new trials
    """
    pass


@app.get(
    '/trials/{trial_db_id}',
    response_model=TrialSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Trials'],
)
def get_trials_trial_db_id(
    trial_db_id: str = Path(..., alias='trialDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[TrialSingleResponse, str]:
    """
    Get the details of a specific Trial
    """
    pass


@app.put(
    '/trials/{trial_db_id}',
    response_model=TrialSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Trials'],
)
def put_trials_trial_db_id(
    trial_db_id: str = Path(..., alias='trialDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: TrialNewRequest = None,
) -> Union[TrialSingleResponse, str]:
    """
    Update the details of an existing Trial
    """
    pass
