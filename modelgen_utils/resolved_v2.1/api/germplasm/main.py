# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Germplasm-2.1-resolved.yaml
#   timestamp: 2023-03-20T19:02:20+00:00

from __future__ import annotations

from typing import List, Optional, Union

from fastapi import FastAPI, Header, Path, Query
from pydantic import constr

from .models import (
    BreedingMethodListResponse,
    BreedingMethodSingleResponse,
    CrossesListResponse,
    CrossesPutRequest,
    CrossingProjectNewRequest,
    CrossingProjectsListResponse,
    CrossingProjectsSingleResponse,
    CrossNewRequest,
    Field202AcceptedSearchResponse,
    GermplasmAttributeCategoryListResponse,
    GermplasmAttributeListResponse,
    GermplasmAttributeNewRequest,
    GermplasmAttributeSearchRequest,
    GermplasmAttributeSingleResponse,
    GermplasmAttributeValueListResponse,
    GermplasmAttributeValueNewRequest,
    GermplasmAttributeValueSearchRequest,
    GermplasmAttributeValueSingleResponse,
    GermplasmListResponse,
    GermplasmMCPDResponse,
    GermplasmNewRequest,
    GermplasmPedigreeResponse,
    GermplasmProgenyResponse,
    GermplasmSearchRequest,
    GermplasmSingleResponse,
    PedigreeListResponse,
    PedigreeNode,
    PedigreePutRequest,
    PedigreeSearchRequest,
    PlannedCrossesListResponse,
    PlannedcrossesPutRequest,
    PlannedCrossNewRequest,
    SeedLotListResponse,
    SeedLotNewRequest,
    SeedLotSingleResponse,
    SeedLotTransactionListResponse,
    SeedLotTransactionNewRequest,
    Status4,
    TransactionDirection1,
    TransactionDirection2,
)

app = FastAPI(
    title='BrAPI-Germplasm',
    description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/RESTfulness">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Response_Structure">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Dates_and_Times">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Location_Coordinates">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Error_Handling">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Search_Services">Search Services</a></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
    version='2.1',
    servers=[{'url': 'https://test-server.brapi.org/brapi/v2'}],
)


@app.get(
    '/attributes',
    response_model=GermplasmAttributeListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attributes'],
)
def get_attributes(
    attribute_category: Optional[str] = Query(None, alias='attributeCategory'),
    attribute_db_id: Optional[str] = Query(None, alias='attributeDbId'),
    attribute_name: Optional[str] = Query(None, alias='attributeName'),
    attribute_p_u_i: Optional[str] = Query(None, alias='attributePUI'),
    method_db_id: Optional[str] = Query(None, alias='methodDbId'),
    method_name: Optional[str] = Query(None, alias='methodName'),
    method_p_u_i: Optional[str] = Query(None, alias='methodPUI'),
    scale_db_id: Optional[str] = Query(None, alias='scaleDbId'),
    scale_name: Optional[str] = Query(None, alias='scaleName'),
    scale_p_u_i: Optional[str] = Query(None, alias='scalePUI'),
    trait_db_id: Optional[str] = Query(None, alias='traitDbId'),
    trait_name: Optional[str] = Query(None, alias='traitName'),
    trait_p_u_i: Optional[str] = Query(None, alias='traitPUI'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeListResponse, str]:
    """
    Get the Germplasm Attributes
    """
    pass


@app.post(
    '/attributes',
    response_model=GermplasmAttributeListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attributes'],
)
def post_attributes(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[GermplasmAttributeNewRequest] = None,
) -> Union[GermplasmAttributeListResponse, str]:
    """
    Create new Germplasm Attributes
    """
    pass


@app.get(
    '/attributes/categories',
    response_model=GermplasmAttributeCategoryListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attributes'],
)
def get_attributes_categories(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeCategoryListResponse, str]:
    """
    Get the Categories of Germplasm Attributes
    """
    pass


@app.get(
    '/attributes/{attribute_db_id}',
    response_model=GermplasmAttributeSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attributes'],
)
def get_attributes_attribute_db_id(
    attribute_db_id: str = Path(..., alias='attributeDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeSingleResponse, str]:
    """
    Get the details for a specific Germplasm Attribute
    """
    pass


@app.put(
    '/attributes/{attribute_db_id}',
    response_model=GermplasmAttributeSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attributes'],
)
def put_attributes_attribute_db_id(
    attribute_db_id: str = Path(..., alias='attributeDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeNewRequest = None,
) -> Union[GermplasmAttributeSingleResponse, str]:
    """
    Update an existing Germplasm Attribute
    """
    pass


@app.get(
    '/attributevalues',
    response_model=GermplasmAttributeValueListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attribute Values'],
)
def get_attributevalues(
    attribute_value_db_id: Optional[str] = Query(None, alias='attributeValueDbId'),
    attribute_db_id: Optional[str] = Query(None, alias='attributeDbId'),
    attribute_name: Optional[str] = Query(None, alias='attributeName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeValueListResponse, str]:
    """
    Get the Germplasm Attribute Values
    """
    pass


@app.post(
    '/attributevalues',
    response_model=GermplasmAttributeValueListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attribute Values'],
)
def post_attributevalues(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[GermplasmAttributeValueNewRequest] = None,
) -> Union[GermplasmAttributeValueListResponse, str]:
    """
    Create new Germplasm Attribute Values
    """
    pass


@app.get(
    '/attributevalues/{attribute_value_db_id}',
    response_model=GermplasmAttributeValueSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attribute Values'],
)
def get_attributevalues_attribute_value_db_id(
    attribute_value_db_id: str = Path(..., alias='attributeValueDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeValueSingleResponse, str]:
    """
    Get the details for a specific Germplasm Attribute
    """
    pass


@app.put(
    '/attributevalues/{attribute_value_db_id}',
    response_model=GermplasmAttributeValueSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm Attribute Values'],
)
def put_attributevalues_attribute_value_db_id(
    attribute_value_db_id: str = Path(..., alias='attributeValueDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeValueNewRequest = None,
) -> Union[GermplasmAttributeValueSingleResponse, str]:
    """
    Update an existing Germplasm Attribute Value
    """
    pass


@app.get(
    '/breedingmethods',
    response_model=BreedingMethodListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm'],
)
def get_breedingmethods(
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[BreedingMethodListResponse, str]:
    """
    Get the Breeding Methods
    """
    pass


@app.get(
    '/breedingmethods/{breeding_method_db_id}',
    response_model=BreedingMethodSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def get_breedingmethods_breeding_method_db_id(
    breeding_method_db_id: str = Path(..., alias='breedingMethodDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[BreedingMethodSingleResponse, str]:
    """
    Get the details of a specific Breeding Method
    """
    pass


@app.get(
    '/crosses',
    response_model=CrossesListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crosses'],
)
def get_crosses(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    crossing_project_name: Optional[str] = Query(None, alias='crossingProjectName'),
    cross_db_id: Optional[str] = Query(None, alias='crossDbId'),
    cross_name: Optional[str] = Query(None, alias='crossName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[CrossesListResponse, str]:
    """
    Get a filtered list of Cross entities
    """
    pass


@app.put(
    '/crosses',
    response_model=CrossesListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crosses'],
)
def put_crosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: CrossesPutRequest = None,
) -> Union[CrossesListResponse, str]:
    """
    Update existing Cross entities on this server
    """
    pass


@app.post(
    '/crosses',
    response_model=CrossesListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crosses'],
)
def post_crosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[CrossNewRequest] = None,
) -> Union[CrossesListResponse, str]:
    """
    Create new Cross entities on this server
    """
    pass


@app.get(
    '/crossingprojects',
    response_model=CrossingProjectsListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crossing Projects'],
)
def get_crossingprojects(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    crossing_project_name: Optional[str] = Query(None, alias='crossingProjectName'),
    include_potential_parents: Optional[bool] = Query(
        None, alias='includePotentialParents'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[CrossingProjectsListResponse, str]:
    """
    Get a filtered list of Crossing Projects
    """
    pass


@app.post(
    '/crossingprojects',
    response_model=CrossingProjectsListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crossing Projects'],
)
def post_crossingprojects(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[CrossingProjectNewRequest] = None,
) -> Union[CrossingProjectsListResponse, str]:
    """
    Create new Crossing Project entities on this server
    """
    pass


@app.get(
    '/crossingprojects/{crossing_project_db_id}',
    response_model=CrossingProjectsSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crossing Projects'],
)
def get_crossingprojects_crossing_project_db_id(
    crossing_project_db_id: str = Path(..., alias='crossingProjectDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[CrossingProjectsSingleResponse, str]:
    """
    Get a filtered list of Crossing Projects
    """
    pass


@app.put(
    '/crossingprojects/{crossing_project_db_id}',
    response_model=CrossingProjectsSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crossing Projects'],
)
def put_crossingprojects_crossing_project_db_id(
    crossing_project_db_id: str = Path(..., alias='crossingProjectDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: CrossingProjectNewRequest = None,
) -> Union[CrossingProjectsSingleResponse, str]:
    """
    Update an existing Crossing Project
    """
    pass


@app.get(
    '/germplasm',
    response_model=GermplasmListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm'],
)
def get_germplasm(
    accession_number: Optional[str] = Query(None, alias='accessionNumber'),
    collection: Optional[str] = None,
    binomial_name: Optional[str] = Query(None, alias='binomialName'),
    genus: Optional[str] = None,
    species: Optional[str] = None,
    synonym: Optional[str] = None,
    parent_db_id: Optional[str] = Query(None, alias='parentDbId'),
    progeny_db_id: Optional[str] = Query(None, alias='progenyDbId'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    germplasm_name: Optional[str] = Query(None, alias='germplasmName'),
    germplasm_p_u_i: Optional[str] = Query(None, alias='germplasmPUI'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmListResponse, str]:
    """
    Get a filtered list of Germplasm
    """
    pass


@app.post(
    '/germplasm',
    response_model=GermplasmListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Germplasm'],
)
def post_germplasm(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[GermplasmNewRequest] = None,
) -> Union[GermplasmListResponse, str]:
    """
    Create new Germplasm entities on this server
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}',
    response_model=GermplasmSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def get_germplasm_germplasm_db_id(
    germplasm_db_id: str = Path(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmSingleResponse, str]:
    """
    Get the details of a specific Germplasm
    """
    pass


@app.put(
    '/germplasm/{germplasm_db_id}',
    response_model=GermplasmSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def put_germplasm_germplasm_db_id(
    germplasm_db_id: str = Path(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: GermplasmNewRequest = None,
) -> Union[GermplasmSingleResponse, str]:
    """
    Update the details of an existing Germplasm
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/mcpd',
    response_model=GermplasmMCPDResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def get_germplasm_germplasm_db_id_mcpd(
    germplasm_db_id: str = Path(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmMCPDResponse, str]:
    """
    Get the details of a specific Germplasm in MCPD format
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/pedigree',
    response_model=GermplasmPedigreeResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def get_germplasm_germplasm_db_id_pedigree(
    germplasm_db_id: str = Path(..., alias='germplasmDbId'),
    notation: Optional[str] = None,
    include_siblings: Optional[bool] = Query(None, alias='includeSiblings'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmPedigreeResponse, str]:
    """
        **Deprecated in v2.1** Please use `GET /pedigree?germplasmDbId={germplasmDbId}`. Github issue number #481
    <br/> Get the pedigree details of a specific Germplasm
    """
    pass


@app.get(
    '/germplasm/{germplasm_db_id}/progeny',
    response_model=GermplasmProgenyResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def get_germplasm_germplasm_db_id_progeny(
    germplasm_db_id: str = Path(..., alias='germplasmDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmProgenyResponse, str]:
    """
        **Deprecated in v2.1** Please use `GET /pedigree?germplasmDbId={germplasmDbId}`. Github issue number #481
    <br/> Get the progeny details of a specific Germplasm
    """
    pass


@app.get(
    '/pedigree',
    response_model=PedigreeListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Pedigree'],
)
def get_pedigree(
    accession_number: Optional[str] = Query(None, alias='accessionNumber'),
    collection: Optional[str] = None,
    family_code: Optional[str] = Query(None, alias='familyCode'),
    binomial_name: Optional[str] = Query(None, alias='binomialName'),
    genus: Optional[str] = None,
    species: Optional[str] = None,
    synonym: Optional[str] = None,
    include_parents: Optional[bool] = Query(None, alias='includeParents'),
    include_siblings: Optional[bool] = Query(None, alias='includeSiblings'),
    include_progeny: Optional[bool] = Query(None, alias='includeProgeny'),
    include_full_tree: Optional[bool] = Query(None, alias='includeFullTree'),
    pedigree_depth: Optional[int] = Query(None, alias='pedigreeDepth'),
    progeny_depth: Optional[int] = Query(None, alias='progenyDepth'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    germplasm_name: Optional[str] = Query(None, alias='germplasmName'),
    germplasm_p_u_i: Optional[str] = Query(None, alias='germplasmPUI'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[PedigreeListResponse, str]:
    """
    Get a filtered list of pedigree nodes which represent a subset of a pedigree tree
    """
    pass


@app.put(
    '/pedigree',
    response_model=PedigreeListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Pedigree'],
)
def put_pedigree(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: PedigreePutRequest = None,
) -> Union[PedigreeListResponse, str]:
    """
    Send a list of pedigree nodes to update existing information on a server
    """
    pass


@app.post(
    '/pedigree',
    response_model=PedigreeListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Pedigree'],
)
def post_pedigree(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[PedigreeNode] = None,
) -> Union[PedigreeListResponse, str]:
    """
    Send a list of new pedigree nodes to a server
    """
    pass


@app.get(
    '/plannedcrosses',
    response_model=PlannedCrossesListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crosses'],
)
def get_plannedcrosses(
    crossing_project_db_id: Optional[str] = Query(None, alias='crossingProjectDbId'),
    crossing_project_name: Optional[str] = Query(None, alias='crossingProjectName'),
    planned_cross_db_id: Optional[str] = Query(None, alias='plannedCrossDbId'),
    planned_cross_name: Optional[str] = Query(None, alias='plannedCrossName'),
    status: Optional[Status4] = None,
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[PlannedCrossesListResponse, str]:
    """
    Get a filtered list of Planned Cross entities
    """
    pass


@app.put(
    '/plannedcrosses',
    response_model=PlannedCrossesListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crosses'],
)
def put_plannedcrosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: PlannedcrossesPutRequest = None,
) -> Union[PlannedCrossesListResponse, str]:
    """
    Update existing Planned Cross entities on this server
    """
    pass


@app.post(
    '/plannedcrosses',
    response_model=PlannedCrossesListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Crosses'],
)
def post_plannedcrosses(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[PlannedCrossNewRequest] = None,
) -> Union[PlannedCrossesListResponse, str]:
    """
    Create new Planned Cross entities on this server
    """
    pass


@app.post(
    '/search/attributes',
    response_model=GermplasmAttributeListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Germplasm Attributes'],
)
def post_search_attributes(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeSearchRequest = None,
) -> Union[GermplasmAttributeListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for Germplasm `Attributes`
    """
    pass


@app.get(
    '/search/attributes/{search_results_db_id}',
    response_model=GermplasmAttributeListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm Attributes'],
)
def get_search_attributes_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a Germplasm `Attributes` search request
    """
    pass


@app.post(
    '/search/attributevalues',
    response_model=GermplasmAttributeValueListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Germplasm Attribute Values'],
)
def post_search_attributevalues(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: GermplasmAttributeValueSearchRequest = None,
) -> Union[GermplasmAttributeValueListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for Germplasm `AttributeValues`
    """
    pass


@app.get(
    '/search/attributevalues/{search_results_db_id}',
    response_model=GermplasmAttributeValueListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm Attribute Values'],
)
def get_search_attributevalues_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmAttributeValueListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a Germplasm `AttributeValues` search request
    """
    pass


@app.post(
    '/search/germplasm',
    response_model=GermplasmListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Germplasm'],
)
def post_search_germplasm(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: GermplasmSearchRequest = None,
) -> Union[GermplasmListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Germplasm`
    """
    pass


@app.get(
    '/search/germplasm/{search_results_db_id}',
    response_model=GermplasmListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Germplasm'],
)
def get_search_germplasm_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[GermplasmListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Germplasm` search request
    """
    pass


@app.post(
    '/search/pedigree',
    response_model=PedigreeListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Pedigree'],
)
def post_search_pedigree(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: PedigreeSearchRequest = None,
) -> Union[PedigreeListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Pedigree`
    """
    pass


@app.get(
    '/search/pedigree/{search_results_db_id}',
    response_model=PedigreeListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Pedigree'],
)
def get_search_pedigree_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[PedigreeListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Pedigree` search request
    """
    pass


@app.get(
    '/seedlots',
    response_model=SeedLotListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seed Lots'],
)
def get_seedlots(
    seed_lot_db_id: Optional[str] = Query(None, alias='seedLotDbId'),
    cross_db_id: Optional[str] = Query(None, alias='crossDbId'),
    cross_name: Optional[str] = Query(None, alias='crossName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    germplasm_name: Optional[str] = Query(None, alias='germplasmName'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[SeedLotListResponse, str]:
    """
    Get a filtered list of Seed Lot descriptions
    """
    pass


@app.post(
    '/seedlots',
    response_model=SeedLotListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seed Lots'],
)
def post_seedlots(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[SeedLotNewRequest] = None,
) -> Union[SeedLotListResponse, str]:
    """
    Add new Seed Lot descriptions to a server
    """
    pass


@app.get(
    '/seedlots/transactions',
    response_model=SeedLotTransactionListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seed Lots'],
)
def get_seedlots_transactions(
    transaction_db_id: Optional[str] = Query(None, alias='transactionDbId'),
    seed_lot_db_id: Optional[str] = Query(None, alias='seedLotDbId'),
    cross_db_id: Optional[str] = Query(None, alias='crossDbId'),
    cross_name: Optional[str] = Query(None, alias='crossName'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    germplasm_name: Optional[str] = Query(None, alias='germplasmName'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[SeedLotTransactionListResponse, str]:
    """
    Get a filtered list of Seed Lot Transactions
    """
    pass


@app.post(
    '/seedlots/transactions',
    response_model=SeedLotTransactionListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Seed Lots'],
)
def post_seedlots_transactions(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[SeedLotTransactionNewRequest] = None,
) -> Union[SeedLotTransactionListResponse, str]:
    """
    Add new Seed Lot Transaction to be recorded
    """
    pass


@app.get(
    '/seedlots/{seed_lot_db_id}',
    response_model=SeedLotSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Seed Lots'],
)
def get_seedlots_seed_lot_db_id(
    seed_lot_db_id: str = Path(..., alias='seedLotDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[SeedLotSingleResponse, str]:
    """
    Get a specific Seed Lot
    """
    pass


@app.put(
    '/seedlots/{seed_lot_db_id}',
    response_model=SeedLotSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Seed Lots'],
)
def put_seedlots_seed_lot_db_id(
    seed_lot_db_id: str = Path(..., alias='seedLotDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: SeedLotNewRequest = None,
) -> Union[SeedLotSingleResponse, str]:
    """
    Update an existing Seed Lot
    """
    pass


@app.get(
    '/seedlots/{seed_lot_db_id}/transactions',
    response_model=SeedLotTransactionListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Seed Lots'],
)
def get_seedlots_seed_lot_db_id_transactions(
    seed_lot_db_id: str = Path(..., alias='seedLotDbId'),
    transaction_db_id: Optional[str] = Query(None, alias='transactionDbId'),
    transaction_direction: Optional[TransactionDirection2] = Query(
        None, alias='transactionDirection'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[SeedLotTransactionListResponse, str]:
    """
    Get all Transactions related to a specific Seed Lot
    """
    pass
