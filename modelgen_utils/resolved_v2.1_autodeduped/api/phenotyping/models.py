# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Phenotyping-2.1-resolved.yaml
#   timestamp: 2023-03-20T19:02:24+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, constr


class ObservationTreatment(BaseModel):
    factor: Optional[str] = Field(
        None,
        description="The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
        example='fertilizer',
    )
    modality: Optional[str] = Field(
        None,
        description="The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
        example='low fertilizer',
    )


class ObservationVariableSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    dataTypes: Optional[List[DataType]] = Field(
        None,
        description='List of scale data types to filter search results',
        example=['Numerical', 'Ordinal', 'Text'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    methodDbIds: Optional[List[str]] = Field(
        None,
        description='List of methods to filter search results',
        example=['07e34f83', 'd3d5517a'],
    )
    methodNames: Optional[List[str]] = Field(
        None,
        description='Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation',
        example=['Measuring Tape', 'Spectrometer'],
    )
    methodPUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of a Method, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0000212',
            'http://my-traits.com/trait/CO_123:0003557',
        ],
    )
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )
    observationVariablePUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0008012',
            'http://my-traits.com/trait/CO_123:0007261',
        ],
    )
    ontologyDbIds: Optional[List[str]] = Field(
        None,
        description='List of ontology IDs to search for',
        example=['f44f7b23', 'a26b576e'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    scaleDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier for a Scale',
        example=['a13ecffa', '7e1afe4f'],
    )
    scaleNames: Optional[List[str]] = Field(
        None,
        description='Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable',
        example=['Meters', 'Liters'],
    )
    scalePUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of a Scale, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0000336',
            'http://my-traits.com/trait/CO_123:0000560',
        ],
    )
    studyDbId: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on',
        example=['5bcac0ae', '7f48e22d'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    traitAttributePUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"',
        example=[
            'http://my-traits.com/trait/CO_123:0008336',
            'http://my-traits.com/trait/CO_123:0001092',
        ],
    )
    traitAttributes: Optional[List[str]] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"',
        example=['Height', 'Color'],
    )
    traitClasses: Optional[List[str]] = Field(
        None,
        description='List of trait classes to filter search results',
        example=['morphological', 'phenological', 'agronomical'],
    )
    traitDbIds: Optional[List[str]] = Field(
        None,
        description='The unique identifier for a Trait',
        example=['ef81147b', '78d82fad'],
    )
    traitEntities: Optional[List[str]] = Field(
        None,
        description='A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"',
        example=['Stalk', 'Root'],
    )
    traitEntityPUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain" ',
        example=[
            'http://my-traits.com/trait/CO_123:0004098',
            'http://my-traits.com/trait/CO_123:0002366',
        ],
    )
    traitNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation',
        example=['Stalk Height', 'Root Color'],
    )
    traitPUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of a Trait, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0000456',
            'http://my-traits.com/trait/CO_123:0000820',
        ],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class Ontology(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    authors: Optional[str] = Field(
        None,
        description="Ontology's list of authors (no specific format)",
        example='Bob Robertson, Rob Robertson',
    )
    copyright: Optional[str] = Field(
        None, description='Ontology copyright', example='Copyright 1987, Bob Robertson'
    )
    description: Optional[str] = Field(
        None,
        description='Human readable description of Ontology',
        example='This is an example ontology that does not exist',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of an object',
        example='https://wiki.brapi.org/ontology',
    )
    licence: Optional[str] = Field(
        None, description='Ontology licence', example='MIT Open source licence'
    )
    ontologyDbId: str = Field(
        ..., description='Ontology database unique identifier', example='18e186cd'
    )
    ontologyName: str = Field(
        ..., description='Ontology name', example='The Official Ontology'
    )
    version: Optional[str] = Field(
        None, description='Ontology version (no specific format)', example='V1.3.2'
    )


class OntologyNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    authors: Optional[str] = Field(
        None,
        description="Ontology's list of authors (no specific format)",
        example='Bob Robertson, Rob Robertson',
    )
    copyright: Optional[str] = Field(
        None, description='Ontology copyright', example='Copyright 1987, Bob Robertson'
    )
    description: Optional[str] = Field(
        None,
        description='Human readable description of Ontology',
        example='This is an example ontology that does not exist',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of an object',
        example='https://wiki.brapi.org/ontology',
    )
    licence: Optional[str] = Field(
        None, description='Ontology licence', example='MIT Open source licence'
    )
    ontologyName: str = Field(
        ..., description='Ontology name', example='The Official Ontology'
    )
    version: Optional[str] = Field(
        None, description='Ontology version (no specific format)', example='V1.3.2'
    )


class SeasonObs(BaseModel):
    season: Optional[str] = Field(
        None,
        description="**Deprecated in v2.1** Please use `seasonName`. Github issue number #456 \n<br>Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
        example='Spring',
    )
    seasonDbId: str = Field(
        ...,
        description="The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
        example='Spring_2018',
    )
    seasonName: Optional[str] = Field(
        None,
        description="Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
        example='Spring',
    )
    year: Optional[int] = Field(
        None, description='The 4 digit year of the season.', example=2018
    )


class BasePagination(BaseModel):
    currentPage: int = Field(
        ...,
        description='The index number for the returned page of data. This should always match the requested page number or the default page (0).',
        example=0,
    )
    pageSize: int = Field(
        ...,
        description='The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.',
        example=1000,
    )
    totalCount: Optional[int] = Field(
        None,
        description='The total number of elements that are available on the server and match the requested query parameters.',
        example=10,
    )
    totalPages: Optional[int] = Field(
        None,
        description='The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)',
        example=1,
    )


class SearchImagesBody(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    imageDbIds: Optional[List[str]] = Field(
        None,
        description='A list of image Ids to search for',
        example=['564b64a6', '0d122d1d'],
    )
    imageFileNames: Optional[List[str]] = Field(
        None,
        description='Image file names to search for.',
        example=['image_01032019.jpg', 'picture_field_1234.jpg'],
    )
    imageFileSizeMax: Optional[int] = Field(
        None, description='A maximum image file size to search for.', example=20000000
    )
    imageFileSizeMin: Optional[int] = Field(
        None, description='A minimum image file size to search for.', example=1000
    )
    imageHeightMax: Optional[int] = Field(
        None, description='A maximum image height to search for.', example=1080
    )
    imageHeightMin: Optional[int] = Field(
        None, description='A minimum image height to search for.', example=720
    )
    imageLocation: Optional[GeoJSONSearchArea] = None
    imageNames: Optional[List[str]] = Field(
        None,
        description='Human readable names to search for.',
        example=['Image 43', 'Tractor in field'],
    )
    imageTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='The latest timestamp to search for.'
    )
    imageTimeStampRangeStart: Optional[datetime] = Field(
        None, description='The earliest timestamp to search for.'
    )
    imageWidthMax: Optional[int] = Field(
        None, description='A maximum image width to search for.', example=1920
    )
    imageWidthMin: Optional[int] = Field(
        None, description='A minimum image width to search for.', example=1280
    )
    mimeTypes: Optional[List[constr(regex=r'image/.*')]] = Field(
        None,
        description='A set of image file types to search for.',
        example=['image/jpg', 'image/jpeg', 'image/gif'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with to search for',
        example=['47326456', 'fc9823ac'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A set of observation unit identifiers to search for.',
        example=['f5e4b273', '328c9424'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class SearchObservationsBody(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an Observation',
        example=['6a4a59d8', '3ff067e0'],
    )
    observationLevelRelationships: Optional[
        List[ObservationUnitLevelRelationship]
    ] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships',
        example=[{'levelCode': 'Field_1', 'levelName': 'field'}],
    )
    observationLevels: Optional[List[ObservationUnitLevel]] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevel',
        example=[
            {'levelCode': 'Plot_123', 'levelName': 'plot'},
            {'levelCode': 'Plot_456', 'levelName': 'plot'},
            {'levelCode': 'Plot_789', 'levelName': 'plot'},
        ],
    )
    observationTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='Timestamp range end'
    )
    observationTimeStampRangeStart: Optional[datetime] = Field(
        None, description='Timestamp range start'
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an Observation Unit',
        example=['76f559b5', '066bc5d3'],
    )
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )
    observationVariablePUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0008012',
            'http://my-traits.com/trait/CO_123:0007261',
        ],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    seasonDbIds: Optional[List[str]] = Field(
        None,
        description='The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)',
        example=['Spring 2018', 'Season A'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class EventEventDateRange(BaseModel):
    discreteDates: Optional[List[datetime]] = Field(
        None,
        description='A list of dates when the event occurred\n<br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.',
        example=[
            '2018-10-08T18:15:11Z',
            '2018-11-09T18:16:12Z',
            '2018-11-19T18:16:12Z',
        ],
    )
    endDate: Optional[datetime] = Field(
        None,
        description='The end of a continous or regularly repetitive event\n<br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.',
        example='2018-10-08T18:15:11Z',
    )
    startDate: Optional[datetime] = Field(
        None,
        description='The begining of a continous or regularly repetitive event\n<br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.',
        example='2018-10-08T18:15:11Z',
    )


class EventEventParameters(BaseModel):
    code: Optional[str] = Field(
        None,
        description='The shortened code name of an event parameter\n<br>ICASA "Code_Display"',
        example='tiimp',
    )
    description: Optional[str] = Field(
        None,
        description="A human readable description of this event parameter. This description is usually associated with the 'name' and 'code' of an event parameter.",
        example='Implement or tool used for tillage',
    )
    key: Optional[str] = Field(
        None,
        description='**Deprecated in v2.1** Please use `name`. Github issue number #440             \n<br>Specifies the relationship between the event and the given property. E.g. fertilizer, operator',
        example='operator',
    )
    name: Optional[str] = Field(
        None,
        description='The full name of an event parameter\n<br>ICASA "Variable_Name"',
        example='tillage_implement',
    )
    rdfValue: Optional[str] = Field(
        None,
        description='**Deprecated in v2.1** Please use `code`. Github issue number #440             \n<brThe type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent',
        example='http://xmlns.com/foaf/0.1/Agent',
    )
    units: Optional[str] = Field(
        None,
        description='The units or data type of the \'value\'. \n<br>If the \'value\' comes from a standardized vocabulary or an encoded list of values, then \'unit\' should be \'code\'. \n<br>If the \'value\' IS NOT a number, then \'unit\' should specify a data type eg. \'text\', \'boolean\', \'date\', etc. \n<br>If the value IS a number, then \'unit\' should specify the units used eg. \'ml\', \'cm\', etc\n<br>ICASA "Unit_or_type"',
        example='code',
    )
    value: Optional[str] = Field(
        None,
        description="The single value of this event parameter. This single value is accurate for all the dates in the date range. If 'value' is populated then 'valuesByDate' should NOT be populated.",
        example='TI001',
    )
    valueDescription: Optional[str] = Field(
        None,
        description="If the event parameter 'unit' field is 'code', then use 'valueDescription' to add a human readable description to the value.",
        example='Standard V-Ripper (TI001)',
    )
    valuesByDate: Optional[List[str]] = Field(
        None,
        description="An array of values corresponding to each timestamp in the 'discreteDates' array of this event. The 'valuesByDate' array should exactly match the size of the 'discreteDates' array. If 'valuesByDate' is populated then 'value' should NOT be populated.",
        example=['20', '50', '40'],
    )


class MethodOntologyReferenceDocumentationLinks(BaseModel):
    URL: Optional[AnyUrl] = Field(None, example='http://purl.obolibrary.org/obo/ro.owl')
    type: Optional[Type] = Field(None, example='OBO')


class ObservationSeason(BaseModel):
    season: Optional[str] = Field(
        None,
        description="**Deprecated in v2.1** Please use `seasonName`. Github issue number #456 \n<br>Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
        example='Spring',
    )
    seasonDbId: str = Field(
        ...,
        description="The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
        example='Spring_2018',
    )
    seasonName: Optional[str] = Field(
        None,
        description="Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
        example='Spring',
    )
    year: Optional[int] = Field(
        None, description='The 4 digit year of the season.', example=2018
    )


class ObservationTableObservationVariables(BaseModel):
    observationVariableDbId: Optional[str] = Field(
        None, description='Variable unique identifier', example='367aa1a9'
    )
    observationVariableName: Optional[str] = Field(
        None, description='Variable name (usually a short name)', example='Plant height'
    )


class ObservationUnitObservations(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    collector: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which collected the observation',
        example='917d3ae0',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    geoCoordinates: Optional[GeoJSON] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='2408ab11',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000003',
    )
    observationDbId: str = Field(
        ...,
        description='The ID which uniquely identifies an observation',
        example='ef24b615',
    )
    observationTimeStamp: Optional[datetime] = Field(
        None, description='The date and time when this observation was made'
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example='598111d4',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationVariableDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation variable',
        example='c403d107',
    )
    observationVariableName: Optional[str] = Field(
        None,
        description='A human readable name for an observation variable',
        example='Plant Height in meters',
    )
    season: Optional[ObservationSeason] = None
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='ef2829db',
    )
    uploadedBy: Optional[str] = Field(
        None,
        description='The name or id of the user who uploaded the observation to the database system',
        example='a2f7f60b',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the data collected as an observation',
        example='2.3',
    )


class ObservationUnitTreatments(BaseModel):
    factor: Optional[str] = Field(
        None,
        description="The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
        example='fertilizer',
    )
    modality: Optional[str] = Field(
        None,
        description="The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
        example='low fertilizer',
    )


class ObservationVariableScaleValidValuesCategories(BaseModel):
    label: Optional[str] = Field(None, description='A text label for a category')
    value: Optional[str] = Field(None, description='The actual value for a category')


class ObservationVariableScaleValidValues(BaseModel):
    categories: Optional[List[ObservationVariableScaleValidValuesCategories]] = Field(
        None,
        description='List of possible values with optional labels',
        example=[
            {'label': 'low', 'value': '0'},
            {'label': 'medium', 'value': '5'},
            {'label': 'high', 'value': '10'},
        ],
    )
    max: Optional[int] = Field(
        None,
        description='**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.',
        example=9999,
    )
    maximumValue: Optional[str] = Field(
        None,
        description='Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.',
        example='9999',
    )
    min: Optional[int] = Field(
        None,
        description='**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.',
        example=2,
    )
    minimumValue: Optional[str] = Field(
        None,
        description='Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.',
        example='2',
    )


class ImageDeleteResponseResult(BaseModel):
    imageDbIds: List[str] = Field(
        ...,
        description='The unique ids of the Image records which have been successfully deleted',
        example=['6a4a59d8', '3ff067e0'],
    )


class ObservationDeleteResponseResult(BaseModel):
    observationDbIds: List[str] = Field(
        ...,
        description='The unique ids of the Observation records which have been successfully deleted',
        example=['6a4a59d8', '3ff067e0'],
    )


class ObservationLevelListResponseResult(BaseModel):
    data: List[ObservationUnitHierarchyLevel] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
        example=[
            {'levelName': 'field', 'levelOrder': 0},
            {'levelName': 'block', 'levelOrder': 1},
            {'levelName': 'plot', 'levelOrder': 2},
            {'levelName': 'sub-plot', 'levelOrder': 3},
            {'levelName': 'plant', 'levelOrder': 4},
        ],
    )


class OntologyListResponseResult(BaseModel):
    data: List[Ontology] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class Event(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    date: Optional[List[datetime]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `eventDateRange.discreteDates`. Github issue number #440             \n<br>A list of dates when the event occurred\n<br>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.',
        example=['2018-10-08T18:15:11Z', '2018-11-09T18:16:12Z'],
    )
    eventDateRange: Optional[EventEventDateRange] = None
    eventDbId: str = Field(
        ..., description='Internal database identifier', example='8566d4cb'
    )
    eventDescription: Optional[str] = Field(
        None,
        description='A detailed, human-readable description of this event\n<br/>MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. ',
        example='A set of plots was watered',
    )
    eventParameters: Optional[List[EventEventParameters]] = Field(
        None,
        description='A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI',
        example=[
            {
                'code': 'tiimp',
                'description': 'Implement or tool used for tillage',
                'name': 'tillage_implement',
                'unit': 'code',
                'value': 'TI001',
                'valueDescription': 'Standard V-Ripper (TI001)',
            },
            {
                'code': 'tidep',
                'description': 'Tillage operations depth in centimeters',
                'name': 'tillage_operations_depth',
                'unit': 'cm',
                'valuesByDate': ['20', '50', '40'],
            },
            {
                'code': 'timix',
                'description': 'Tillage operations mixing effectiveness',
                'name': 'till_mix_effectiveness',
                'unit': 'percent',
                'value': '50',
            },
        ],
    )
    eventType: str = Field(
        ...,
        description='General category for this event (e.g. fertilizer, irrigation, tillage). Each eventType should correspond to exactly one eventTypeDbId, if provided.\n<br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other\n<br/>MIAPPE V1.1 (DM-65) Event type - Short name of the event.',
        example='tillage',
    )
    eventTypeDbId: Optional[str] = Field(
        None,
        description='An identifier for this event type, in the form of an ontology class reference\n<br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other\n<br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).',
        example='4e7d691e',
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study',
        example=['8439eaff', 'd7682e7a', '305ae51c'],
    )
    studyDbId: Optional[str] = Field(
        None, description='The study in which the event occurred', example='2cc2001f'
    )
    studyName: Optional[str] = Field(
        None, description='The human readable name of a study', example='2cc2001f'
    )


class Image(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageDbId: str = Field(
        ..., description='The unique identifier of an image', example='a55efb9c'
    )
    imageFileName: Optional[str] = Field(
        None,
        description="The name of the image file. Might be the same as 'imageName', but could be different.",
        example='image_0000231.jpg',
    )
    imageFileSize: Optional[int] = Field(
        None, description='The size of the image in Bytes.', example=50000
    )
    imageHeight: Optional[int] = Field(
        None, description='The height of the image in Pixels.', example=550
    )
    imageLocation: Optional[GeoJSON] = None
    imageName: Optional[str] = Field(
        None,
        description="The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
        example='Tomato Image 1',
    )
    imageTimeStamp: Optional[datetime] = Field(
        None, description='The date and time the image was taken'
    )
    imageURL: Optional[str] = Field(
        None,
        description='The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.',
        example='https://wiki.brapi.org/images/tomato',
    )
    imageWidth: Optional[int] = Field(
        None, description='The width of the image in Pixels.', example=700
    )
    mimeType: Optional[constr(regex=r'image/.*')] = Field(
        None,
        description="The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
        example='image/jpeg',
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with, if applicable.',
        example=['d05dd235', '8875177d', 'c08e81b6'],
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The related observation unit identifier, if relevant.',
        example='b7e690b6',
    )


class ImageNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    copyright: Optional[str] = Field(
        None,
        description="The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
        example='Copyright 2018 Bob Robertson',
    )
    description: Optional[str] = Field(
        None,
        description='The human readable description of an image.',
        example='This is a picture of a tomato',
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    imageFileName: Optional[str] = Field(
        None,
        description="The name of the image file. Might be the same as 'imageName', but could be different.",
        example='image_0000231.jpg',
    )
    imageFileSize: Optional[int] = Field(
        None, description='The size of the image in Bytes.', example=50000
    )
    imageHeight: Optional[int] = Field(
        None, description='The height of the image in Pixels.', example=550
    )
    imageLocation: Optional[GeoJSON] = None
    imageName: Optional[str] = Field(
        None,
        description="The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
        example='Tomato Image 1',
    )
    imageTimeStamp: Optional[datetime] = Field(
        None, description='The date and time the image was taken'
    )
    imageURL: Optional[str] = Field(
        None,
        description='The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.',
        example='https://wiki.brapi.org/images/tomato',
    )
    imageWidth: Optional[int] = Field(
        None, description='The width of the image in Pixels.', example=700
    )
    mimeType: Optional[constr(regex=r'image/.*')] = Field(
        None,
        description="The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
        example='image/jpeg',
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with, if applicable.',
        example=['d05dd235', '8875177d', 'c08e81b6'],
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The related observation unit identifier, if relevant.',
        example='b7e690b6',
    )


class ImageSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    descriptiveOntologyTerms: Optional[List[str]] = Field(
        None,
        description='A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.',
        example=['doi:10.1002/0470841559', 'Red', 'ncbi:0300294'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    imageDbIds: Optional[List[str]] = Field(
        None,
        description='A list of image Ids to search for',
        example=['564b64a6', '0d122d1d'],
    )
    imageFileNames: Optional[List[str]] = Field(
        None,
        description='Image file names to search for.',
        example=['image_01032019.jpg', 'picture_field_1234.jpg'],
    )
    imageFileSizeMax: Optional[int] = Field(
        None, description='A maximum image file size to search for.', example=20000000
    )
    imageFileSizeMin: Optional[int] = Field(
        None, description='A minimum image file size to search for.', example=1000
    )
    imageHeightMax: Optional[int] = Field(
        None, description='A maximum image height to search for.', example=1080
    )
    imageHeightMin: Optional[int] = Field(
        None, description='A minimum image height to search for.', example=720
    )
    imageLocation: Optional[GeoJSONSearchArea] = None
    imageNames: Optional[List[str]] = Field(
        None,
        description='Human readable names to search for.',
        example=['Image 43', 'Tractor in field'],
    )
    imageTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='The latest timestamp to search for.'
    )
    imageTimeStampRangeStart: Optional[datetime] = Field(
        None, description='The earliest timestamp to search for.'
    )
    imageWidthMax: Optional[int] = Field(
        None, description='A maximum image width to search for.', example=1920
    )
    imageWidthMin: Optional[int] = Field(
        None, description='A minimum image width to search for.', example=1280
    )
    mimeTypes: Optional[List[constr(regex=r'image/.*')]] = Field(
        None,
        description='A set of image file types to search for.',
        example=['image/jpg', 'image/jpeg', 'image/gif'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='A list of observation Ids this image is associated with to search for',
        example=['47326456', 'fc9823ac'],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='A set of observation unit identifiers to search for.',
        example=['f5e4b273', '328c9424'],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )


class MethodNewRequest(BaseModel):
    __root__: MethodBaseClass


class Observation(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    collector: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which collected the observation',
        example='917d3ae0',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    geoCoordinates: Optional[GeoJSON] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='2408ab11',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000003',
    )
    observationDbId: str = Field(
        ...,
        description='The ID which uniquely identifies an observation',
        example='ef24b615',
    )
    observationTimeStamp: Optional[datetime] = Field(
        None, description='The date and time when this observation was made'
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example='598111d4',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationVariableDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation variable',
        example='c403d107',
    )
    observationVariableName: Optional[str] = Field(
        None,
        description='A human readable name for an observation variable',
        example='Plant Height in meters',
    )
    season: Optional[ObservationSeason] = None
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='ef2829db',
    )
    uploadedBy: Optional[str] = Field(
        None,
        description='The name or id of the user who uploaded the observation to the database system',
        example='a2f7f60b',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the data collected as an observation',
        example='2.3',
    )


class ObservationNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    collector: Optional[str] = Field(
        None,
        description='The name or identifier of the entity which collected the observation',
        example='917d3ae0',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    geoCoordinates: Optional[GeoJSON] = None
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='2408ab11',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000003',
    )
    observationTimeStamp: Optional[datetime] = Field(
        None, description='The date and time when this observation was made'
    )
    observationUnitDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation unit',
        example='598111d4',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationVariableDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies an observation variable',
        example='c403d107',
    )
    observationVariableName: Optional[str] = Field(
        None,
        description='A human readable name for an observation variable',
        example='Plant Height in meters',
    )
    season: Optional[ObservationSeason] = None
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='ef2829db',
    )
    uploadedBy: Optional[str] = Field(
        None,
        description='The name or id of the user who uploaded the observation to the database system',
        example='a2f7f60b',
    )
    value: Optional[str] = Field(
        None,
        description='The value of the data collected as an observation',
        example='2.3',
    )


class ObservationSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )
    observationDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an Observation',
        example=['6a4a59d8', '3ff067e0'],
    )
    observationLevelRelationships: Optional[
        List[ObservationUnitLevelRelationship]
    ] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships',
        example=[{'levelCode': 'Field_1', 'levelName': 'field'}],
    )
    observationLevels: Optional[List[ObservationUnitLevel]] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevel',
        example=[
            {'levelCode': 'Plot_123', 'levelName': 'plot'},
            {'levelCode': 'Plot_456', 'levelName': 'plot'},
            {'levelCode': 'Plot_789', 'levelName': 'plot'},
        ],
    )
    observationTimeStampRangeEnd: Optional[datetime] = Field(
        None, description='Timestamp range end'
    )
    observationTimeStampRangeStart: Optional[datetime] = Field(
        None, description='Timestamp range start'
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an Observation Unit',
        example=['76f559b5', '066bc5d3'],
    )
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )
    observationVariablePUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0008012',
            'http://my-traits.com/trait/CO_123:0007261',
        ],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    seasonDbIds: Optional[List[str]] = Field(
        None,
        description='The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)',
        example=['Spring 2018', 'Season A'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class ObservationTable(BaseModel):
    data: Optional[List[List[str]]] = Field(
        None,
        description='The 2D matrix of observation data. ObservationVariables and other metadata are the columns, ObservationUnits are the rows.',
        example=[
            [
                '2019-09-10T18:13:27.223Z',
                'f3a8a3db',
                'Plant Alpha',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_111',
                'Plant_1111',
                'Pot_1111',
                'Block_11',
                'Entry_11',
                'Rep_11',
                '25.3',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:14:27.223Z',
                'f3a8a3db',
                'Plant Alpha',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_111',
                'Plant_1111',
                'Pot_1111',
                'Block_11',
                'Entry_11',
                'Rep_11',
                '',
                '3',
                '',
                '',
            ],
            [
                '2019-09-10T18:15:54.868Z',
                '05d1b011',
                'Plant Beta',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_112',
                'Plant_1122',
                'Pot_1122',
                'Block_11',
                'Entry_11',
                'Rep_12',
                '27.9',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:16:54.868Z',
                '05d1b011',
                'Plant Beta',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_112',
                'Plant_1122',
                'Pot_1122',
                'Block_11',
                'Entry_11',
                'Rep_12',
                '',
                '1',
                '',
                '',
            ],
            [
                '2019-09-10T18:17:34.433Z',
                '67e2d87c',
                'Plant Gamma',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_123',
                'Plant_1233',
                'Pot_1233',
                'Block_12',
                'Entry_12',
                'Rep_11',
                '',
                '3',
                '',
                '',
            ],
            [
                '2019-09-10T18:18:34.433Z',
                '67e2d87c',
                'Plant Gamma',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_123',
                'Plant_1233',
                'Pot_1233',
                'Block_12',
                'Entry_12',
                'Rep_11',
                '25.5',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:19:15.629Z',
                'd98d0d4c',
                'Plant Epsilon',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_124',
                'Plant_1244',
                'Pot_1244',
                'Block_12',
                'Entry_12',
                'Rep_12',
                '28.9',
                '',
                '',
                '',
            ],
            [
                '2019-09-10T18:20:15.629Z',
                'd98d0d4c',
                'Plant Epsilon',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_124',
                'Plant_1244',
                'Pot_1244',
                'Block_12',
                'Entry_12',
                'Rep_12',
                '',
                '0',
                '',
                '',
            ],
        ],
    )
    headerRow: Optional[List[HeaderRowEnum]] = Field(
        None,
        description='<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array "headerRow" will always contain "observationUnitDbId" and any or all of the OPTIONAL column header names. \nThe second array "observationVariables" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>',
        example=[
            'observationTimeStamp',
            'observationUnitDbId',
            'observationUnitName',
            'studyDbId',
            'studyName',
            'germplasmDbId',
            'germplasmName',
            'positionCoordinateX',
            'positionCoordinateY',
            'year',
            'field',
            'plot',
            'sub-plot',
            'plant',
            'pot',
            'block',
            'entry',
            'rep',
        ],
    )
    observationVariables: Optional[List[ObservationTableObservationVariables]] = Field(
        None,
        description="The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
        example=[
            {
                'observationVariableDbId': '367aa1a9',
                'observationVariableName': 'Plant height',
            },
            {
                'observationVariableDbId': '2acb934c',
                'observationVariableName': 'Carotenoid',
            },
            {
                'observationVariableDbId': '85a21ce1',
                'observationVariableName': 'Root color',
            },
            {
                'observationVariableDbId': '46f590e5',
                'observationVariableName': 'Virus severity',
            },
        ],
    )


class ObservationUnit(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    crossDbId: Optional[str] = Field(
        None, description='the unique identifier for a cross', example='d105fd6f'
    )
    crossName: Optional[str] = Field(
        None,
        description='the human readable name for a cross',
        example='my_Crosses_2018_01',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='e9d9ed57',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000001',
    )
    locationDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a location, associated with this study',
        example='0e208b20',
    )
    locationName: Optional[str] = Field(
        None,
        description='The human readable name of a location associated with this study',
        example='Field Station Alpha',
    )
    observationUnitDbId: str = Field(
        ...,
        description='The ID which uniquely identifies an observation unit\n\nMIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. ',
        example='8c67503c',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationUnitPUI: Optional[str] = Field(
        None,
        description='A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.',
        example='http://pui.per/plot/1a9afc14',
    )
    observationUnitPosition: Optional[ObservationUnitObservationUnitPosition] = None
    observations: Optional[List[ObservationUnitObservations]] = Field(
        None,
        description="All observations attached to this observation unit. \n\nDefault for this field is null or omitted. Do NOT include data in this field unless the 'includeObservations' flag is explicitly set to True.",
    )
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a program',
        example='2d763a7a',
    )
    programName: Optional[str] = Field(
        None,
        description='The human readable name of a program',
        example='The Perfect Breeding Program',
    )
    seedLotDbId: Optional[str] = Field(
        None,
        description='The unique identifier for the originating Seed Lot',
        example='261ecb09',
    )
    seedLotName: Optional[str] = Field(
        None,
        description='A human readable name for the originating Seed Lot',
        example='Seed Lot Alpha',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='9865addc',
    )
    studyName: Optional[str] = Field(
        None,
        description='The human readable name for a study',
        example='Purple_Tomato_1',
    )
    treatments: Optional[List[ObservationUnitTreatments]] = Field(
        None,
        description='List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.',
    )
    trialDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trial', example='776a609c'
    )
    trialName: Optional[str] = Field(
        None, description='The human readable name of a trial', example='Purple Tomato'
    )


class ObservationUnitNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    crossDbId: Optional[str] = Field(
        None, description='the unique identifier for a cross', example='d105fd6f'
    )
    crossName: Optional[str] = Field(
        None,
        description='the human readable name for a cross',
        example='my_Crosses_2018_01',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    germplasmDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a germplasm',
        example='e9d9ed57',
    )
    germplasmName: Optional[str] = Field(
        None,
        description='Name of the germplasm. It can be the preferred name and does not have to be unique.',
        example='A0000001',
    )
    locationDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a location, associated with this study',
        example='0e208b20',
    )
    locationName: Optional[str] = Field(
        None,
        description='The human readable name of a location associated with this study',
        example='Field Station Alpha',
    )
    observationUnitName: Optional[str] = Field(
        None,
        description='A human readable name for an observation unit',
        example='Plot 1',
    )
    observationUnitPUI: Optional[str] = Field(
        None,
        description='A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.',
        example='http://pui.per/plot/1a9afc14',
    )
    observationUnitPosition: Optional[ObservationUnitObservationUnitPosition] = None
    programDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a program',
        example='2d763a7a',
    )
    programName: Optional[str] = Field(
        None,
        description='The human readable name of a program',
        example='The Perfect Breeding Program',
    )
    seedLotDbId: Optional[str] = Field(
        None,
        description='The unique identifier for the originating Seed Lot',
        example='261ecb09',
    )
    seedLotName: Optional[str] = Field(
        None,
        description='A human readable name for the originating Seed Lot',
        example='Seed Lot Alpha',
    )
    studyDbId: Optional[str] = Field(
        None,
        description='The ID which uniquely identifies a study within the given database server',
        example='9865addc',
    )
    studyName: Optional[str] = Field(
        None,
        description='The human readable name for a study',
        example='Purple_Tomato_1',
    )
    treatments: Optional[List[ObservationUnitTreatments]] = Field(
        None,
        description='List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.',
    )
    trialDbId: Optional[str] = Field(
        None, description='The ID which uniquely identifies a trial', example='776a609c'
    )
    trialName: Optional[str] = Field(
        None, description='The human readable name of a trial', example='Purple Tomato'
    )


class ObservationUnitSearchRequest(BaseModel):
    commonCropNames: Optional[List[str]] = Field(
        None,
        description="The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        example=['Tomatillo', 'Paw Paw'],
    )
    externalReferenceIDs: Optional[List[str]] = Field(
        None,
        description='**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceIds: Optional[List[str]] = Field(
        None,
        description='List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)',
        example=['doi:10.155454/12341234', '14a19841'],
    )
    externalReferenceSources: Optional[List[str]] = Field(
        None,
        description='List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)',
        example=['DOI', 'Field App Name'],
    )
    germplasmDbIds: Optional[List[str]] = Field(
        None,
        description='List of IDs which uniquely identify germplasm to search for',
        example=['e9c6edd7', '1b1df4a6'],
    )
    germplasmNames: Optional[List[str]] = Field(
        None,
        description='List of human readable names to identify germplasm to search for',
        example=['A0000003', 'A0000477'],
    )
    includeObservations: Optional[bool] = Field(
        None,
        description='Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.',
        example=False,
    )
    locationDbIds: Optional[List[str]] = Field(
        None,
        description='The location ids to search for',
        example=['b28911cf', '5071d1e4'],
    )
    locationNames: Optional[List[str]] = Field(
        None,
        description='A human readable names to search for',
        example=['Location Alpha', 'The Large Hadron Collider'],
    )
    observationLevelRelationships: Optional[
        List[ObservationUnitLevelRelationship]
    ] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships',
        example=[{'levelCode': 'Field_1', 'levelName': 'field'}],
    )
    observationLevels: Optional[List[ObservationUnitLevel]] = Field(
        None,
        description='Searches for values in ObservationUnit->observationUnitPosition->observationLevel',
        example=[
            {'levelCode': 'Plot_123', 'levelName': 'plot'},
            {'levelCode': 'Plot_456', 'levelName': 'plot'},
            {'levelCode': 'Plot_789', 'levelName': 'plot'},
        ],
    )
    observationUnitDbIds: Optional[List[str]] = Field(
        None,
        description='The unique id of an observation unit',
        example=['66bab7e3', '0e5e7f99'],
    )
    observationUnitNames: Optional[List[str]] = Field(
        None,
        description='The human readable identifier for an Observation Unit',
        example=['FieldA_PlotB', 'SpecialPlantName'],
    )
    observationVariableDbIds: Optional[List[str]] = Field(
        None,
        description='The DbIds of Variables to search for',
        example=['a646187d', '6d23513b'],
    )
    observationVariableNames: Optional[List[str]] = Field(
        None,
        description='The names of Variables to search for',
        example=['Plant Height in meters', 'Wheat rust score 1-5'],
    )
    observationVariablePUIs: Optional[List[str]] = Field(
        None,
        description='The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI',
        example=[
            'http://my-traits.com/trait/CO_123:0008012',
            'http://my-traits.com/trait/CO_123:0007261',
        ],
    )
    page: Optional[int] = Field(
        None,
        description="Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        example=0,
    )
    pageSize: Optional[int] = Field(
        None,
        description='The size of the pages to be returned. Default is `1000`.',
        example=1000,
    )
    programDbIds: Optional[List[str]] = Field(
        None,
        description='A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['8f5de35b', '0e2d4a13'],
    )
    programNames: Optional[List[str]] = Field(
        None,
        description='Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.',
        example=['Better Breeding Program', 'Best Breeding Program'],
    )
    seasonDbIds: Optional[List[str]] = Field(
        None,
        description='The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)',
        example=['Spring 2018', 'Season A'],
    )
    studyDbIds: Optional[List[str]] = Field(
        None,
        description='List of study identifiers to search for',
        example=['cf6c4bd4', '691e69d6'],
    )
    studyNames: Optional[List[str]] = Field(
        None,
        description='List of study names to filter search results',
        example=['The First Bob Study 2017', 'Wheat Yield Trial 246'],
    )
    trialDbIds: Optional[List[str]] = Field(
        None,
        description='The ID which uniquely identifies a trial to search for',
        example=['d2593dc2', '9431a731'],
    )
    trialNames: Optional[List[str]] = Field(
        None,
        description='The human readable name of a trial to search for',
        example=['All Yield Trials 2016', 'Disease Resistance Study Comparison Group'],
    )


class ObservationUnitTable(BaseModel):
    data: Optional[List[List[str]]] = Field(
        None,
        description='The 2D matrix of observation data. ObservationVariables and other metadata are the columns, ObservationUnits are the rows.',
        example=[
            [
                'f3a8a3db',
                'Plant Alpha',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_111',
                'Plant_1111',
                'Pot_1111',
                'Block_11',
                'Entry_11',
                'Rep_11',
                '25.3',
                '3',
                '50.75',
            ],
            [
                '05d1b011',
                'Plant Beta',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409301',
                '2017',
                'Field_1',
                'Plot_11',
                'SubPlot_112',
                'Plant_1122',
                'Pot_1122',
                'Block_11',
                'Entry_11',
                'Rep_12',
                '27.9',
                '1',
                '45.345',
            ],
            [
                '67e2d87c',
                'Plant Gamma',
                '0fe3e48b',
                '2017 Plant Study',
                '06307ec0',
                'A0043001',
                '76.50106681',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_123',
                'Plant_1233',
                'Pot_1233',
                'Block_12',
                'Entry_12',
                'Rep_11',
                '25.5',
                '3',
                '50.76',
            ],
            [
                'd98d0d4c',
                'Plant Epsilon',
                '0fe3e48b',
                '2017 Plant Study',
                '59d435cd',
                'A0043002',
                '76.50106683',
                '42.44409356',
                '2017',
                'Field_1',
                'Plot_12',
                'SubPlot_124',
                'Plant_1244',
                'Pot_1244',
                'Block_12',
                'Entry_12',
                'Rep_12',
                '28.9',
                '0',
                '46.5',
            ],
        ],
    )
    headerRow: Optional[List[HeaderRowEnum]] = Field(
        None,
        description='<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array "headerRow" will always contain "observationUnitDbId" and any or all of the OPTIONAL column header names. \nThe second array "observationVariables" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>',
        example=[
            'observationUnitDbId',
            'observationUnitName',
            'studyDbId',
            'studyName',
            'germplasmDbId',
            'germplasmName',
            'positionCoordinateX',
            'positionCoordinateY',
            'year',
            'field',
            'plot',
            'sub-plot',
            'plant',
            'pot',
            'block',
            'entry',
            'rep',
        ],
    )
    observationVariables: Optional[List[ObservationTableObservationVariables]] = Field(
        None,
        description="The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
        example=[
            {
                'observationVariableDbId': '367aa1a9',
                'observationVariableName': 'Plant height',
            },
            {
                'observationVariableDbId': '2acb934c',
                'observationVariableName': 'Carotenoid',
            },
            {
                'observationVariableDbId': '85a21ce1',
                'observationVariableName': 'Root color',
            },
            {
                'observationVariableDbId': '46f590e5',
                'observationVariableName': 'Virus severity',
            },
        ],
    )


class ObservationVariable(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    commonCropName: Optional[str] = Field(
        None, description='Crop name (examples: "Maize", "Wheat")', example='Maize'
    )
    contextOfUse: Optional[List[str]] = Field(
        None,
        description='Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])',
        example=['Trial evaluation', 'Nursery evaluation'],
    )
    defaultValue: Optional[str] = Field(
        None,
        description='Variable default value. (examples: "red", "2.3", etc.)',
        example='2.0',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of an object',
        example='https://wiki.brapi.org/documentation.html',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    growthStage: Optional[str] = Field(
        None,
        description='Growth stage at which measurement is made (examples: "flowering")',
        example='flowering',
    )
    institution: Optional[str] = Field(
        None,
        description='Name of institution submitting the variable',
        example='The BrAPI Institute',
    )
    language: Optional[str] = Field(
        None,
        description='2 letter ISO 639-1 code for the language of submission of the variable.',
        example='en',
    )
    method: ObservationVariableMethod
    observationVariableDbId: str = Field(
        ...,
        description='Variable unique identifier\n\nMIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.',
        example='b9b7edd1',
    )
    observationVariableName: str = Field(
        ...,
        description='Variable name (usually a short name)\n\nMIAPPE V1.1 (DM-84) Variable name - Name of the variable.',
        example='Variable Name',
    )
    observationVariablePUI: Optional[str] = Field(
        None,
        description='The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI',
        example='http://my-traits.com/trait/CO_123:0009012',
    )
    ontologyReference: Optional[MethodOntologyReference] = None
    scale: ObservationVariableScale
    scientist: Optional[str] = Field(
        None,
        description='Name of scientist submitting the variable.',
        example='Dr. Bob Robertson',
    )
    status: Optional[str] = Field(
        None,
        description='Variable status. (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    submissionTimestamp: Optional[datetime] = Field(
        None, description='Timestamp when the Variable was added (ISO 8601)'
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other variable names',
        example=['Maize Height', 'Stalk Height', 'Corn Height'],
    )
    trait: ObservationVariableTrait


class ObservationVariableNewRequest(BaseModel):
    additionalInfo: Optional[Dict[str, str]] = Field(
        None,
        description='A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.',
    )
    commonCropName: Optional[str] = Field(
        None, description='Crop name (examples: "Maize", "Wheat")', example='Maize'
    )
    contextOfUse: Optional[List[str]] = Field(
        None,
        description='Indication of how trait is routinely used. (examples: ["Trial evaluation", "Nursery evaluation"])',
        example=['Trial evaluation', 'Nursery evaluation'],
    )
    defaultValue: Optional[str] = Field(
        None,
        description='Variable default value. (examples: "red", "2.3", etc.)',
        example='2.0',
    )
    documentationURL: Optional[AnyUrl] = Field(
        None,
        description='A URL to the human readable documentation of an object',
        example='https://wiki.brapi.org/documentation.html',
    )
    externalReferences: Optional[List[ExternalReferencesInner]] = Field(
        None,
        description='An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.',
        example=[
            {'referenceId': 'doi:10.155454/12341234', 'referenceSource': 'DOI'},
            {
                'referenceId': '75a50e76',
                'referenceSource': 'Remote Data Collection Upload Tool',
            },
        ],
        title='ExternalReferences',
    )
    growthStage: Optional[str] = Field(
        None,
        description='Growth stage at which measurement is made (examples: "flowering")',
        example='flowering',
    )
    institution: Optional[str] = Field(
        None,
        description='Name of institution submitting the variable',
        example='The BrAPI Institute',
    )
    language: Optional[str] = Field(
        None,
        description='2 letter ISO 639-1 code for the language of submission of the variable.',
        example='en',
    )
    method: ObservationVariableMethod
    observationVariableName: str = Field(
        ...,
        description='Human readable name of an Observation Variable\n\nMIAPPE V1.1 (DM-84) Variable name - Name of the variable.',
        example='Variable Name',
    )
    observationVariablePUI: Optional[str] = Field(
        None,
        description='The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI',
        example='http://my-traits.com/trait/CO_123:0009012',
    )
    ontologyReference: Optional[MethodOntologyReference] = None
    scale: ObservationVariableScale
    scientist: Optional[str] = Field(
        None,
        description='Name of scientist submitting the variable.',
        example='Dr. Bob Robertson',
    )
    status: Optional[str] = Field(
        None,
        description='Variable status. (examples: "recommended", "obsolete", "legacy", etc.)',
        example='recommended',
    )
    submissionTimestamp: Optional[datetime] = Field(
        None, description='Timestamp when the Variable was added (ISO 8601)'
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Other variable names',
        example=['Maize Height', 'Stalk Height', 'Corn Height'],
    )
    trait: ObservationVariableTrait


class ScaleNewRequest(BaseModel):
    __root__: ScaleBaseClass


class TraitNewRequest(BaseModel):
    __root__: TraitBaseClass


class ImageDeleteResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageDeleteResponseResult


class ObservationDeleteResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationDeleteResponseResult


class ImageSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Image


class MethodSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Method


class ObservationLevelListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationLevelListResponseResult


class ObservationTableResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationTable


class ObservationSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Observation


class ObservationUnitTableResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationUnitTable


class ObservationUnitSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationUnit


class OntologyListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: OntologyListResponseResult


class OntologySingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Ontology


class ScaleSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Scale


class TraitSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: Trait


class ObservationVariableSingleResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationVariable


class EventsResponseResult(BaseModel):
    data: List[Event] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ImageListResponseResult(BaseModel):
    data: List[Image] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class MethodListResponseResult(BaseModel):
    data: List[Method] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ObservationListResponseResult(BaseModel):
    data: List[Observation] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ObservationUnitListResponseResult(BaseModel):
    data: List[ObservationUnit] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ScaleListResponseResult(BaseModel):
    data: List[Scale] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ObservationVariableListResponseResult(BaseModel):
    data: List[ObservationVariable] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class TraitListResponseResult(BaseModel):
    data: List[Trait] = Field(
        ...,
        description='The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.',
    )


class ObservationsPutRequest(BaseModel):
    __root__: Optional[Dict[str, ObservationNewRequest]] = None


class ObservationunitsPutRequest(BaseModel):
    __root__: Optional[Dict[str, ObservationUnitNewRequest]] = None


class EventsResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: EventsResponseResult


class ImageListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ImageListResponseResult


class MethodListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: MethodListResponseResult


class ObservationListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationListResponseResult


class ObservationUnitListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationUnitListResponseResult


class ScaleListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ScaleListResponseResult


class ObservationVariableListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: ObservationVariableListResponseResult


class TraitListResponse(BaseModel):
    field_context: Optional[Context] = Field(None, alias='@context')
    metadata: Metadata
    result: TraitListResponseResult
