# generated by fastapi-codegen:
#   filename:  PlantBreedingAPI-BrAPI-Phenotyping-2.1-resolved.yaml
#   timestamp: 2023-03-20T19:02:24+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional, Union

from fastapi import FastAPI, Header, Path, Query
from pydantic import constr

from .models import (
    ContentTypes,
    EventsResponse,
    Field202AcceptedSearchResponse,
    ImageDeleteResponse,
    ImageListResponse,
    ImageNewRequest,
    ImageSearchRequest,
    ImageSingleResponse,
    MethodListResponse,
    MethodNewRequest,
    MethodSingleResponse,
    ObservationDeleteResponse,
    ObservationLevelListResponse,
    ObservationListResponse,
    ObservationNewRequest,
    ObservationSearchRequest,
    ObservationSingleResponse,
    ObservationsPutRequest,
    ObservationTableResponse,
    ObservationUnitListResponse,
    ObservationUnitNewRequest,
    ObservationUnitSearchRequest,
    ObservationUnitSingleResponse,
    ObservationunitsPutRequest,
    ObservationUnitTableResponse,
    ObservationVariableListResponse,
    ObservationVariableNewRequest,
    ObservationVariableSearchRequest,
    ObservationVariableSingleResponse,
    OntologyListResponse,
    OntologyNewRequest,
    OntologySingleResponse,
    ScaleListResponse,
    ScaleNewRequest,
    ScaleSingleResponse,
    SearchImagesBody,
    SearchObservationsBody,
    TraitListResponse,
    TraitNewRequest,
    TraitSingleResponse,
)

app = FastAPI(
    title='BrAPI-Phenotyping',
    description='The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class="brapi-section">\n<h2 class="brapi-section-title">General Reference Documentation</h2>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/RESTfulness">URL Structure</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Response_Structure">Response Structure</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Dates_and_Times">Date/Time Encoding</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Location_Coordinates">Location Encoding</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Error_Handling">Error Handling</a></div>\n<div class="gen-info-link"><a href="https://wiki.brapi.org/index.php/Search_Services">Search Services</a></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Core</h2>\n<div class="brapi-section-description">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapicore21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="current-brapi-section brapi-section">\n<h2 class="brapi-section-title">BrAPI Phenotyping</h2>\n<div class="brapi-section-description">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapiphenotyping21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Genotyping</h2>\n<div class="brapi-section-description">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigenotyping21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<div class="brapi-section">\n<h2 class="brapi-section-title">BrAPI Germplasm</h2>\n<div class="brapi-section-description">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class="version-number">V2.1</div>\n<div class="link-btn"><a href="https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm">GitHub</a></div>\n<div class="link-btn"><a href="https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1">SwaggerHub</a></div>\n<div class="link-btn"><a href="https://brapigermplasm21.docs.apiary.io">Apiary</a></div>\n<div class="stop-float"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>',
    version='2.1',
    servers=[{'url': 'https://test-server.brapi.org/brapi/v2'}],
)


@app.post(
    '/delete/images',
    response_model=ImageDeleteResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Images'],
)
def post_delete_images(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ImageSearchRequest = None,
) -> Union[ImageDeleteResponse, str]:
    """
    Submit a delete request for `Images`
    """
    pass


@app.post(
    '/delete/observations',
    response_model=ObservationDeleteResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observations'],
)
def post_delete_observations(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationSearchRequest = None,
) -> Union[ObservationDeleteResponse, str]:
    """
    Submit a delete request for `Observations`
    """
    pass


@app.get(
    '/events',
    response_model=EventsResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Events'],
)
def get_events(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    event_db_id: Optional[str] = Query(None, alias='eventDbId'),
    event_type: Optional[str] = Query(None, alias='eventType'),
    date_range_start: Optional[datetime] = Query(None, alias='dateRangeStart'),
    date_range_end: Optional[datetime] = Query(None, alias='dateRangeEnd'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[EventsResponse, str]:
    """
    Get the Events
    """
    pass


@app.get(
    '/images',
    response_model=ImageListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Images'],
)
def get_images(
    image_db_id: Optional[str] = Query(None, alias='imageDbId'),
    image_name: Optional[str] = Query(None, alias='imageName'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    descriptive_ontology_term: Optional[str] = Query(
        None, alias='descriptiveOntologyTerm'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ImageListResponse, str]:
    """
    Get the image metadata summaries
    """
    pass


@app.post(
    '/images',
    response_model=ImageListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Images'],
)
def post_images(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ImageNewRequest] = None,
) -> Union[ImageListResponse, str]:
    """
    Create new image metadata records
    """
    pass


@app.get(
    '/images/{image_db_id}',
    response_model=ImageSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Images'],
)
def get_images_image_db_id(
    image_db_id: str = Path(..., alias='imageDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ImageSingleResponse, str]:
    """
    Get the an image metadata summary
    """
    pass


@app.put(
    '/images/{image_db_id}',
    response_model=ImageSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Images'],
)
def put_images_image_db_id(
    image_db_id: str = Path(..., alias='imageDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ImageNewRequest = None,
) -> Union[ImageSingleResponse, str]:
    """
    Update an existing image metadata record
    """
    pass


@app.put(
    '/images/{image_db_id}/imagecontent',
    response_model=ImageSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Images'],
)
def put_images_image_db_id_imagecontent(
    image_db_id: str = Path(..., alias='imageDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ImageSingleResponse, str]:
    """
    Attach an image binary file to an existing image metadata record
    """
    pass


@app.get(
    '/methods',
    response_model=MethodListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Methods'],
)
def get_methods(
    method_db_id: Optional[str] = Query(None, alias='methodDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    ontology_db_id: Optional[str] = Query(None, alias='ontologyDbId'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[MethodListResponse, str]:
    """
    Get the Methods
    """
    pass


@app.post(
    '/methods',
    response_model=MethodListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Methods'],
)
def post_methods(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[MethodNewRequest] = None,
) -> Union[MethodListResponse, str]:
    """
    Add new Methods
    """
    pass


@app.get(
    '/methods/{method_db_id}',
    response_model=MethodSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Methods'],
)
def get_methods_method_db_id(
    method_db_id: str = Path(..., alias='methodDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[MethodSingleResponse, str]:
    """
    Get the details for a specific Method
    """
    pass


@app.put(
    '/methods/{method_db_id}',
    response_model=MethodSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Methods'],
)
def put_methods_method_db_id(
    method_db_id: str = Path(..., alias='methodDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: MethodNewRequest = None,
) -> Union[MethodSingleResponse, str]:
    """
    Update an existing Method
    """
    pass


@app.get(
    '/observationlevels',
    response_model=ObservationLevelListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def get_observationlevels(
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationLevelListResponse, str]:
    """
    Get the Observation Levels
    """
    pass


@app.get(
    '/observations',
    response_model=ObservationListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observations'],
)
def get_observations(
    observation_db_id: Optional[str] = Query(None, alias='observationDbId'),
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_time_stamp_range_start: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeStart'
    ),
    observation_time_stamp_range_end: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeEnd'
    ),
    observation_unit_level_name: Optional[str] = Query(
        None, alias='observationUnitLevelName'
    ),
    observation_unit_level_order: Optional[str] = Query(
        None, alias='observationUnitLevelOrder'
    ),
    observation_unit_level_code: Optional[str] = Query(
        None, alias='observationUnitLevelCode'
    ),
    observation_unit_level_relationship_name: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipName'
    ),
    observation_unit_level_relationship_order: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipOrder'
    ),
    observation_unit_level_relationship_code: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipCode'
    ),
    observation_unit_level_relationship_db_id: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipDbId'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationListResponse, str]:
    """
    Get a filtered set of Observations
    """
    pass


@app.put(
    '/observations',
    response_model=ObservationListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observations'],
)
def put_observations(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationsPutRequest = None,
) -> Union[ObservationListResponse, str]:
    """
    Update multiple Observation entities
    """
    pass


@app.post(
    '/observations',
    response_model=ObservationListResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observations'],
)
def post_observations(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ObservationNewRequest] = None,
) -> Union[ObservationListResponse, str]:
    """
    Add new Observation entities
    """
    pass


@app.get(
    '/observations/table',
    response_model=ObservationTableResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observations'],
)
def get_observations_table(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_level: Optional[str] = Query(None, alias='observationLevel'),
    search_results_db_id: Optional[str] = Query(None, alias='searchResultsDbId'),
    observation_time_stamp_range_start: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeStart'
    ),
    observation_time_stamp_range_end: Optional[datetime] = Query(
        None, alias='observationTimeStampRangeEnd'
    ),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    observation_unit_level_name: Optional[str] = Query(
        None, alias='observationUnitLevelName'
    ),
    observation_unit_level_order: Optional[str] = Query(
        None, alias='observationUnitLevelOrder'
    ),
    observation_unit_level_code: Optional[str] = Query(
        None, alias='observationUnitLevelCode'
    ),
    observation_unit_level_relationship_name: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipName'
    ),
    observation_unit_level_relationship_order: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipOrder'
    ),
    observation_unit_level_relationship_code: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipCode'
    ),
    observation_unit_level_relationship_db_id: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipDbId'
    ),
    accept: ContentTypes = Header(..., alias='Accept'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationTableResponse, str]:
    """
    Get a list of Observations in a table format
    """
    pass


@app.get(
    '/observations/{observation_db_id}',
    response_model=ObservationSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observations'],
)
def get_observations_observation_db_id(
    observation_db_id: str = Path(..., alias='observationDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationSingleResponse, str]:
    """
    Get the details of a specific Observations
    """
    pass


@app.put(
    '/observations/{observation_db_id}',
    response_model=ObservationSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observations'],
)
def put_observations_observation_db_id(
    observation_db_id: str = Path(..., alias='observationDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationNewRequest = None,
) -> Union[ObservationSingleResponse, str]:
    """
    Update an existing Observation
    """
    pass


@app.get(
    '/observationunits',
    response_model=ObservationUnitListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def get_observationunits(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_unit_name: Optional[str] = Query(None, alias='observationUnitName'),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    include_observations: Optional[bool] = Query(None, alias='includeObservations'),
    observation_unit_level_name: Optional[str] = Query(
        None, alias='observationUnitLevelName'
    ),
    observation_unit_level_order: Optional[str] = Query(
        None, alias='observationUnitLevelOrder'
    ),
    observation_unit_level_code: Optional[str] = Query(
        None, alias='observationUnitLevelCode'
    ),
    observation_unit_level_relationship_name: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipName'
    ),
    observation_unit_level_relationship_order: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipOrder'
    ),
    observation_unit_level_relationship_code: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipCode'
    ),
    observation_unit_level_relationship_db_id: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipDbId'
    ),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationUnitListResponse, str]:
    """
    Get a filtered set of Observation Units
    """
    pass


@app.put(
    '/observationunits',
    response_model=ObservationUnitListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def put_observationunits(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationunitsPutRequest = None,
) -> Union[ObservationUnitListResponse, str]:
    """
    Update a set of Observation Units
    """
    pass


@app.post(
    '/observationunits',
    response_model=ObservationUnitListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def post_observationunits(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ObservationUnitNewRequest] = None,
) -> Union[ObservationUnitListResponse, str]:
    """
    Add new Observation Units
    """
    pass


@app.get(
    '/observationunits/table',
    response_model=ObservationUnitTableResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def get_observationunits_table(
    observation_unit_db_id: Optional[str] = Query(None, alias='observationUnitDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    location_db_id: Optional[str] = Query(None, alias='locationDbId'),
    season_db_id: Optional[str] = Query(None, alias='seasonDbId'),
    observation_level: Optional[str] = Query(None, alias='observationLevel'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    germplasm_db_id: Optional[str] = Query(None, alias='germplasmDbId'),
    observation_unit_level_name: Optional[str] = Query(
        None, alias='observationUnitLevelName'
    ),
    observation_unit_level_order: Optional[str] = Query(
        None, alias='observationUnitLevelOrder'
    ),
    observation_unit_level_code: Optional[str] = Query(
        None, alias='observationUnitLevelCode'
    ),
    observation_unit_level_relationship_name: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipName'
    ),
    observation_unit_level_relationship_order: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipOrder'
    ),
    observation_unit_level_relationship_code: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipCode'
    ),
    observation_unit_level_relationship_db_id: Optional[str] = Query(
        None, alias='observationUnitLevelRelationshipDbId'
    ),
    accept: ContentTypes = Header(..., alias='Accept'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationUnitTableResponse, str]:
    """
    Get a list of Observations in a table format
    """
    pass


@app.get(
    '/observationunits/{observation_unit_db_id}',
    response_model=ObservationUnitSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def get_observationunits_observation_unit_db_id(
    observation_unit_db_id: str = Path(..., alias='observationUnitDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationUnitSingleResponse, str]:
    """
    Get the details of a specific Observation Unit
    """
    pass


@app.put(
    '/observationunits/{observation_unit_db_id}',
    response_model=ObservationUnitSingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Units'],
)
def put_observationunits_observation_unit_db_id(
    observation_unit_db_id: str = Path(..., alias='observationUnitDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationUnitNewRequest = None,
) -> Union[ObservationUnitSingleResponse, str]:
    """
    Update an existing Observation Units
    """
    pass


@app.get(
    '/ontologies',
    response_model=OntologyListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Ontologies'],
)
def get_ontologies(
    ontology_name: Optional[str] = Query(None, alias='ontologyName'),
    ontology_db_id: Optional[str] = Query(None, alias='ontologyDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[OntologyListResponse, str]:
    """
    Get a filtered list of Ontologies
    """
    pass


@app.post(
    '/ontologies',
    response_model=OntologyListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Ontologies'],
)
def post_ontologies(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[OntologyNewRequest] = None,
) -> Union[OntologyListResponse, str]:
    """
    Create a new Ontology record in the database
    """
    pass


@app.get(
    '/ontologies/{ontology_db_id}',
    response_model=OntologySingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Ontologies'],
)
def get_ontologies_ontology_db_id(
    ontology_db_id: str = Path(..., alias='ontologyDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[OntologySingleResponse, str]:
    """
    Get a specific Ontology record by its ontologyDbId
    """
    pass


@app.put(
    '/ontologies/{ontology_db_id}',
    response_model=OntologySingleResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Ontologies'],
)
def put_ontologies_ontology_db_id(
    ontology_db_id: str = Path(..., alias='ontologyDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: OntologyNewRequest = None,
) -> Union[OntologySingleResponse, str]:
    """
    Update a specific Ontology record
    """
    pass


@app.get(
    '/scales',
    response_model=ScaleListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Scales'],
)
def get_scales(
    scale_db_id: Optional[str] = Query(None, alias='scaleDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    ontology_db_id: Optional[str] = Query(None, alias='ontologyDbId'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ScaleListResponse, str]:
    """
    Get the Scales
    """
    pass


@app.post(
    '/scales',
    response_model=ScaleListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Scales'],
)
def post_scales(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ScaleNewRequest] = None,
) -> Union[ScaleListResponse, str]:
    """
    Add new Scales
    """
    pass


@app.get(
    '/scales/{scale_db_id}',
    response_model=ScaleSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Scales'],
)
def get_scales_scale_db_id(
    scale_db_id: str = Path(..., alias='scaleDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ScaleSingleResponse, str]:
    """
    Get the details of a specific Scale
    """
    pass


@app.put(
    '/scales/{scale_db_id}',
    response_model=ScaleSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Scales'],
)
def put_scales_scale_db_id(
    scale_db_id: str = Path(..., alias='scaleDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ScaleNewRequest = None,
) -> Union[ScaleSingleResponse, str]:
    """
    Update an existing Scale
    """
    pass


@app.post(
    '/search/images',
    response_model=ImageListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Images'],
)
def post_search_images(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: SearchImagesBody = None,
) -> Union[ImageListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `XXEntitiesXX`
    """
    pass


@app.get(
    '/search/images/{search_results_db_id}',
    response_model=ImageListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Images'],
)
def get_search_images_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ImageListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Images` search request
    """
    pass


@app.post(
    '/search/observations',
    response_model=ObservationListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Observations'],
)
def post_search_observations(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: SearchObservationsBody = None,
) -> Union[ObservationListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `Observations`
    """
    pass


@app.get(
    '/search/observations/{search_results_db_id}',
    response_model=ObservationListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Observations'],
)
def get_search_observations_search_results_db_id(
    accept: ContentTypes = Header(..., alias='Accept'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
) -> Union[ObservationListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `Observations` search request
    """
    pass


@app.post(
    '/search/observationunits',
    response_model=ObservationUnitListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Observation Units'],
)
def post_search_observationunits(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationUnitSearchRequest = None,
) -> Union[ObservationUnitListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for `ObservationUnits`
    """
    pass


@app.get(
    '/search/observationunits/{search_results_db_id}',
    response_model=ObservationUnitListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observation Units'],
)
def get_search_observationunits_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationUnitListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a `ObservationUnits` search request
    """
    pass


@app.post(
    '/search/variables',
    response_model=ObservationVariableListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
    },
    tags=['Observation Variables'],
)
def post_search_variables(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationVariableSearchRequest = None,
) -> Union[ObservationVariableListResponse, Field202AcceptedSearchResponse, str]:
    """
    Submit a search request for Observation `Variables`
    """
    pass


@app.get(
    '/search/variables/{search_results_db_id}',
    response_model=ObservationVariableListResponse,
    responses={
        '202': {'model': Field202AcceptedSearchResponse},
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observation Variables'],
)
def get_search_variables_search_results_db_id(
    search_results_db_id: str = Path(..., alias='searchResultsDbId'),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationVariableListResponse, Field202AcceptedSearchResponse, str]:
    """
    Get the results of a Observation `variables` search request
    """
    pass


@app.get(
    '/traits',
    response_model=TraitListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Traits'],
)
def get_traits(
    trait_db_id: Optional[str] = Query(None, alias='traitDbId'),
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    ontology_db_id: Optional[str] = Query(None, alias='ontologyDbId'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[TraitListResponse, str]:
    """
    Get the Traits
    """
    pass


@app.post(
    '/traits',
    response_model=TraitListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Traits'],
)
def post_traits(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[TraitNewRequest] = None,
) -> Union[TraitListResponse, str]:
    """
    Add new Traits
    """
    pass


@app.get(
    '/traits/{trait_db_id}',
    response_model=TraitSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Traits'],
)
def get_traits_trait_db_id(
    trait_db_id: str = Path(..., alias='traitDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[TraitSingleResponse, str]:
    """
    Get the details of a specific Trait
    """
    pass


@app.put(
    '/traits/{trait_db_id}',
    response_model=TraitSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Traits'],
)
def put_traits_trait_db_id(
    trait_db_id: str = Path(..., alias='traitDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: TraitNewRequest = None,
) -> Union[TraitSingleResponse, str]:
    """
    Update an existing Trait
    """
    pass


@app.get(
    '/variables',
    response_model=ObservationVariableListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Variables'],
)
def get_variables(
    observation_variable_db_id: Optional[str] = Query(
        None, alias='observationVariableDbId'
    ),
    observation_variable_name: Optional[str] = Query(
        None, alias='observationVariableName'
    ),
    observation_variable_p_u_i: Optional[str] = Query(
        None, alias='observationVariablePUI'
    ),
    trait_class: Optional[str] = Query(None, alias='traitClass'),
    method_db_id: Optional[str] = Query(None, alias='methodDbId'),
    method_name: Optional[str] = Query(None, alias='methodName'),
    method_p_u_i: Optional[str] = Query(None, alias='methodPUI'),
    scale_db_id: Optional[str] = Query(None, alias='scaleDbId'),
    scale_name: Optional[str] = Query(None, alias='scaleName'),
    scale_p_u_i: Optional[str] = Query(None, alias='scalePUI'),
    trait_db_id: Optional[str] = Query(None, alias='traitDbId'),
    trait_name: Optional[str] = Query(None, alias='traitName'),
    trait_p_u_i: Optional[str] = Query(None, alias='traitPUI'),
    ontology_db_id: Optional[str] = Query(None, alias='ontologyDbId'),
    common_crop_name: Optional[str] = Query(None, alias='commonCropName'),
    program_db_id: Optional[str] = Query(None, alias='programDbId'),
    trial_db_id: Optional[str] = Query(None, alias='trialDbId'),
    study_db_id: Optional[str] = Query(None, alias='studyDbId'),
    external_reference_i_d: Optional[str] = Query(None, alias='externalReferenceID'),
    external_reference_id: Optional[str] = Query(None, alias='externalReferenceId'),
    external_reference_source: Optional[str] = Query(
        None, alias='externalReferenceSource'
    ),
    page: Optional[int] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationVariableListResponse, str]:
    """
    Get the Observation Variables
    """
    pass


@app.post(
    '/variables',
    response_model=ObservationVariableListResponse,
    responses={'400': {'model': str}, '401': {'model': str}, '403': {'model': str}},
    tags=['Observation Variables'],
)
def post_variables(
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: List[ObservationVariableNewRequest] = None,
) -> Union[ObservationVariableListResponse, str]:
    """
    Add new Observation Variables
    """
    pass


@app.get(
    '/variables/{observation_variable_db_id}',
    response_model=ObservationVariableSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observation Variables'],
)
def get_variables_observation_variable_db_id(
    observation_variable_db_id: str = Path(..., alias='observationVariableDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
) -> Union[ObservationVariableSingleResponse, str]:
    """
    Get the details for a specific Observation Variable
    """
    pass


@app.put(
    '/variables/{observation_variable_db_id}',
    response_model=ObservationVariableSingleResponse,
    responses={
        '400': {'model': str},
        '401': {'model': str},
        '403': {'model': str},
        '404': {'model': str},
    },
    tags=['Observation Variables'],
)
def put_variables_observation_variable_db_id(
    observation_variable_db_id: str = Path(..., alias='observationVariableDbId'),
    authorization: Optional[constr(regex=r'^Bearer .*$')] = Header(
        None, alias='Authorization'
    ),
    body: ObservationVariableNewRequest = None,
) -> Union[ObservationVariableSingleResponse, str]:
    """
    Update an existing Observation Variable
    """
    pass
